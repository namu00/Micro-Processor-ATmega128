
THERMAL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000394  00000428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000394  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010c  0080010c  00000434  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000464  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ad8  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000915  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000049e  00000000  00000000  000018d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  00001d70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cd  00000000  00000000  00001df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000226  00000000  00000000  000022bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000024e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e9       	ldi	r30, 0x94	; 148
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 30       	cpi	r26, 0x0E	; 14
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	2f d1       	rcall	.+606    	; 0x322 <main>
  c4:	65 c1       	rjmp	.+714    	; 0x390 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_twi_port>:
		}
	}
}

void init_twi_port(){
	DDRC = 0xff;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	84 bb       	out	0x14, r24	; 20
	DDRG = 0xff; // FND 출력 세팅
  cc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	TWSR = TWSR & 0xfc; // Prescaler 값 = 00 (1배)
  d0:	e1 e7       	ldi	r30, 0x71	; 113
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	8c 7f       	andi	r24, 0xFC	; 252
  d8:	80 83       	st	Z, r24
	TWBR = (F_CPU/F_SCK - 16) / 2; // 공식 참조, bit rate 설정
  da:	80 ec       	ldi	r24, 0xC0	; 192
  dc:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
  e0:	08 95       	ret

000000e2 <read_twi_2byte_nopreset>:
}

int read_twi_2byte_nopreset(char reg){
	char high_byte, low_byte;
	TWCR = (1 << TWINT) | (1<<TWSTA) | (1<<TWEN); // START 전송
  e2:	94 ea       	ldi	r25, 0xA4	; 164
  e4:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (((TWCR & (1 << TWINT)) == 0x00) || (TWSR & 0xf8) != 0x08) ;
  e8:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  ec:	99 23       	and	r25, r25
  ee:	e4 f7       	brge	.-8      	; 0xe8 <read_twi_2byte_nopreset+0x6>
  f0:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
  f4:	98 7f       	andi	r25, 0xF8	; 248
  f6:	98 30       	cpi	r25, 0x08	; 8
  f8:	b9 f7       	brne	.-18     	; 0xe8 <read_twi_2byte_nopreset+0x6>
	// START 정상 전송 후 인터럽트(TWINT)가 뜨는지 검사 또는 START 전송 완료 상태 검사
	// TWI 개별 동작(START/STOP 전송 및 ACK 수신) 완료 체크는 TWINT 체크로 대치 가능
	TWDR = LM75A_ADDR | 0; // SLA+W 준비, W=0
  fa:	90 e9       	ldi	r25, 0x90	; 144
  fc:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1 << TWINT) | (1 << TWEN); // SLA+W 전송
 100:	94 e8       	ldi	r25, 0x84	; 132
 102:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (((TWCR & (1 << TWINT)) == 0x00) || (TWSR & 0xf8) != 0x18) ;
 106:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 10a:	99 23       	and	r25, r25
 10c:	e4 f7       	brge	.-8      	; 0x106 <read_twi_2byte_nopreset+0x24>
 10e:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 112:	98 7f       	andi	r25, 0xF8	; 248
 114:	98 31       	cpi	r25, 0x18	; 24
 116:	b9 f7       	brne	.-18     	; 0x106 <read_twi_2byte_nopreset+0x24>
	// ACK 수신 후 인터럽트(TWINT)가 뜨는지 검사 또는 ACK 수신 완료 상태 검사
	TWDR = reg; // LM75A Reg 값 준비
 118:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1 << TWINT) | (1 << TWEN); // LM75A Reg 값 전송
 11c:	84 e8       	ldi	r24, 0x84	; 132
 11e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (((TWCR & (1 << TWINT)) == 0x00) || (TWSR & 0xf8) != 0x28) ;
 122:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 126:	88 23       	and	r24, r24
 128:	e4 f7       	brge	.-8      	; 0x122 <read_twi_2byte_nopreset+0x40>
 12a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 12e:	88 7f       	andi	r24, 0xF8	; 248
 130:	88 32       	cpi	r24, 0x28	; 40
 132:	b9 f7       	brne	.-18     	; 0x122 <read_twi_2byte_nopreset+0x40>
	// ACK 수신 후 인터럽트(TWINT)가 뜨는지 검사 또는 ACK 수신 완료 상태 검사
	TWCR = (1 << TWINT) | (1<<TWSTA) | (1<<TWEN); // RESTART 전송
 134:	84 ea       	ldi	r24, 0xA4	; 164
 136:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (((TWCR & (1 << TWINT)) == 0x00) || (TWSR & 0xf8) != 0x10) ;
 13a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 13e:	88 23       	and	r24, r24
 140:	e4 f7       	brge	.-8      	; 0x13a <read_twi_2byte_nopreset+0x58>
 142:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 146:	88 7f       	andi	r24, 0xF8	; 248
 148:	80 31       	cpi	r24, 0x10	; 16
 14a:	b9 f7       	brne	.-18     	; 0x13a <read_twi_2byte_nopreset+0x58>
	// RESTART 정상 전송 후 인터럽트(TWINT)가 뜨는지 검사 또는 RESTART 전송 완료 상태 검사
	TWDR = LM75A_ADDR | 1; // SLA+R 준비, R=1
 14c:	81 e9       	ldi	r24, 0x91	; 145
 14e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1 << TWINT) | (1 << TWEN); // SLA+R 전송
 152:	84 e8       	ldi	r24, 0x84	; 132
 154:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (((TWCR & (1 << TWINT)) == 0x00) || (TWSR & 0xf8) != 0x40) ;
 158:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 15c:	88 23       	and	r24, r24
 15e:	e4 f7       	brge	.-8      	; 0x158 <read_twi_2byte_nopreset+0x76>
 160:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 164:	88 7f       	andi	r24, 0xF8	; 248
 166:	80 34       	cpi	r24, 0x40	; 64
 168:	b9 f7       	brne	.-18     	; 0x158 <read_twi_2byte_nopreset+0x76>
	// ACK 수신 후 인터럽트(TWINT)가 뜨는지 검사 또는 ACK 수신 완료 상태 검사
	TWCR = (1 << TWINT) | (1 << TWEN | 1 << TWEA); // 1st DATA 수신 준비
 16a:	84 ec       	ldi	r24, 0xC4	; 196
 16c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(((TWCR & (1 << TWINT)) == 0x00) || (TWSR & 0xf8) != 0x50) ;
 170:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 174:	88 23       	and	r24, r24
 176:	e4 f7       	brge	.-8      	; 0x170 <read_twi_2byte_nopreset+0x8e>
 178:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 17c:	88 7f       	andi	r24, 0xF8	; 248
 17e:	80 35       	cpi	r24, 0x50	; 80
 180:	b9 f7       	brne	.-18     	; 0x170 <read_twi_2byte_nopreset+0x8e>
	// 1st DATA 수신 후 인터럽트(TWINT)가 뜨는지 검사 또는 1st DATA 수신 완료 상태 검사
	high_byte = TWDR;
 182:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1 << TWINT) | (1 << TWEN); // 2nd DATA 수신 준비
 186:	84 e8       	ldi	r24, 0x84	; 132
 188:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(((TWCR & (1 << TWINT)) == 0x00) || (TWSR & 0xf8) != 0x58) ;
 18c:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 190:	88 23       	and	r24, r24
 192:	e4 f7       	brge	.-8      	; 0x18c <read_twi_2byte_nopreset+0xaa>
 194:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 198:	88 7f       	andi	r24, 0xF8	; 248
 19a:	88 35       	cpi	r24, 0x58	; 88
 19c:	b9 f7       	brne	.-18     	; 0x18c <read_twi_2byte_nopreset+0xaa>
	// 1st DATA 수신 후 인터럽트(TWINT)가 뜨는지 검사 또는 1st DATA 수신 완료 상태 검사
	low_byte = TWDR; // 2nd DATA 수신
 19e:	20 91 73 00 	lds	r18, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN); // STOP 전송
 1a2:	84 e9       	ldi	r24, 0x94	; 148
 1a4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while ((TWCR & (1 << TWSTO))) ; // STOP 확인
 1a8:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 1ac:	84 fd       	sbrc	r24, 4
 1ae:	fc cf       	rjmp	.-8      	; 0x1a8 <read_twi_2byte_nopreset+0xc6>
	return((high_byte<<8) | low_byte); // 수신 DATA 리턴
 1b0:	89 2f       	mov	r24, r25
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	98 2f       	mov	r25, r24
 1b6:	88 27       	eor	r24, r24
}
 1b8:	82 2b       	or	r24, r18
 1ba:	08 95       	ret

000001bc <tone_buzzer>:
	}
}

void tone_buzzer(void)
{
	DDRB |= 0x10;
 1bc:	87 b3       	in	r24, 0x17	; 23
 1be:	80 61       	ori	r24, 0x10	; 16
 1c0:	87 bb       	out	0x17, r24	; 23
	if (buzzer_onoff)
 1c2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1c6:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 1ca:	89 2b       	or	r24, r25
 1cc:	51 f0       	breq	.+20     	; 0x1e2 <tone_buzzer+0x26>
	{
		PORTB |= 1 << 4;
 1ce:	88 b3       	in	r24, 0x18	; 24
 1d0:	80 61       	ori	r24, 0x10	; 16
 1d2:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d4:	8f e1       	ldi	r24, 0x1F	; 31
 1d6:	93 e0       	ldi	r25, 0x03	; 3
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <tone_buzzer+0x1c>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <tone_buzzer+0x22>
 1de:	00 00       	nop
 1e0:	08 95       	ret
		_delay_us(200);
	}
	
	else PORTB &= ~(1 << 4);
 1e2:	88 b3       	in	r24, 0x18	; 24
 1e4:	8f 7e       	andi	r24, 0xEF	; 239
 1e6:	88 bb       	out	0x18, r24	; 24
 1e8:	08 95       	ret

000001ea <display_FND>:
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN); // STOP 전송
	while ((TWCR & (1 << TWSTO))) ; // STOP 확인
	return((high_byte<<8) | low_byte); // 수신 DATA 리턴
}

void display_FND(int value){
 1ea:	0f 93       	push	r16
 1ec:	1f 93       	push	r17
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	cd b7       	in	r28, 0x3d	; 61
 1f4:	de b7       	in	r29, 0x3e	; 62
 1f6:	68 97       	sbiw	r28, 0x18	; 24
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	f8 94       	cli
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	cd bf       	out	0x3d, r28	; 61
 202:	ac 01       	movw	r20, r24
	char digit[12] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7c, 0x07, 0x7f, 0x67, 0x00, 0x40};
 204:	8c e0       	ldi	r24, 0x0C	; 12
 206:	e0 e0       	ldi	r30, 0x00	; 0
 208:	f1 e0       	ldi	r31, 0x01	; 1
 20a:	de 01       	movw	r26, r28
 20c:	11 96       	adiw	r26, 0x01	; 1
 20e:	01 90       	ld	r0, Z+
 210:	0d 92       	st	X+, r0
 212:	8a 95       	dec	r24
 214:	e1 f7       	brne	.-8      	; 0x20e <display_FND+0x24>
	char fnd_sel[4] = {0x01, 0x02, 0x04, 0x08};
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	8d 87       	std	Y+13, r24	; 0x0d
 21a:	82 e0       	ldi	r24, 0x02	; 2
 21c:	8e 87       	std	Y+14, r24	; 0x0e
 21e:	84 e0       	ldi	r24, 0x04	; 4
 220:	8f 87       	std	Y+15, r24	; 0x0f
 222:	88 e0       	ldi	r24, 0x08	; 8
 224:	88 8b       	std	Y+16, r24	; 0x10
	int value_int, value_deci, num[4], i;
	if ((value & 0x8000) != 0x8000) // Sign 비트 체크
 226:	55 23       	and	r21, r21
 228:	2c f0       	brlt	.+10     	; 0x234 <display_FND+0x4a>
		num[3] = 10; // 양수인 경우는 디스플레이 없음
 22a:	8a e0       	ldi	r24, 0x0A	; 10
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	98 8f       	std	Y+24, r25	; 0x18
 230:	8f 8b       	std	Y+23, r24	; 0x17
 232:	07 c0       	rjmp	.+14     	; 0x242 <display_FND+0x58>
	else{
		num[3] = 11; // 음수인 경우는 ‘-’ 디스플레이
 234:	8b e0       	ldi	r24, 0x0B	; 11
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	98 8f       	std	Y+24, r25	; 0x18
 23a:	8f 8b       	std	Y+23, r24	; 0x17
		value = (~value)+1; // 2’s Compliment 값을 취함
 23c:	51 95       	neg	r21
 23e:	41 95       	neg	r20
 240:	51 09       	sbc	r21, r1
	}
	
	value_int = (value & 0x7F00) >> 8;
 242:	9a 01       	movw	r18, r20
 244:	22 27       	eor	r18, r18
 246:	3f 77       	andi	r19, 0x7F	; 127
 248:	23 2f       	mov	r18, r19
 24a:	33 0f       	add	r19, r19
 24c:	33 0b       	sbc	r19, r19
	// High Byte bit 6~0 값 (정수 값)
	value_deci = (value & 0x0080);
	// Low Byte bit7 값 (소수 첫째자리 값)
	num[2] = (value_int / 10) % 10;
 24e:	ea e0       	ldi	r30, 0x0A	; 10
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	c9 01       	movw	r24, r18
 254:	bf 01       	movw	r22, r30
 256:	75 d0       	rcall	.+234    	; 0x342 <__divmodhi4>
 258:	8c 01       	movw	r16, r24
 25a:	cb 01       	movw	r24, r22
 25c:	bf 01       	movw	r22, r30
 25e:	71 d0       	rcall	.+226    	; 0x342 <__divmodhi4>
 260:	9e 8b       	std	Y+22, r25	; 0x16
 262:	8d 8b       	std	Y+21, r24	; 0x15
	num[1] = value_int % 10;
 264:	1c 8b       	std	Y+20, r17	; 0x14
 266:	0b 8b       	std	Y+19, r16	; 0x13
	num[0] = (value_deci == 0x80) ? 5 : 0; // 소수 첫째자리가 1이면 0.5에 해당하므로 5를 디스플레이
 268:	47 ff       	sbrs	r20, 7
 26a:	03 c0       	rjmp	.+6      	; 0x272 <display_FND+0x88>
 26c:	85 e0       	ldi	r24, 0x05	; 5
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <display_FND+0x8c>
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	9a 8b       	std	Y+18, r25	; 0x12
 278:	89 8b       	std	Y+17, r24	; 0x11
	
	if(value_int >= 30 || value_int < 20) buzzer_onoff = !buzzer_onoff;
 27a:	24 51       	subi	r18, 0x14	; 20
 27c:	31 09       	sbc	r19, r1
 27e:	2a 30       	cpi	r18, 0x0A	; 10
 280:	31 05       	cpc	r19, r1
 282:	70 f0       	brcs	.+28     	; 0x2a0 <display_FND+0xb6>
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__data_end>
 28c:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__data_end+0x1>
 290:	23 2b       	or	r18, r19
 292:	11 f0       	breq	.+4      	; 0x298 <display_FND+0xae>
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 29c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	tone_buzzer();
 2a0:	8d df       	rcall	.-230    	; 0x1bc <tone_buzzer>
	for(i=0; i<4; i++){
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	2f c0       	rjmp	.+94     	; 0x306 <display_FND+0x11c>
		PORTC = digit[num[i]]; PORTG = fnd_sel[i];
 2a8:	fc 01       	movw	r30, r24
 2aa:	ee 0f       	add	r30, r30
 2ac:	ff 1f       	adc	r31, r31
 2ae:	21 e0       	ldi	r18, 0x01	; 1
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	2c 0f       	add	r18, r28
 2b4:	3d 1f       	adc	r19, r29
 2b6:	e2 0f       	add	r30, r18
 2b8:	f3 1f       	adc	r31, r19
 2ba:	00 88       	ldd	r0, Z+16	; 0x10
 2bc:	f1 89       	ldd	r31, Z+17	; 0x11
 2be:	e0 2d       	mov	r30, r0
 2c0:	e2 0f       	add	r30, r18
 2c2:	f3 1f       	adc	r31, r19
 2c4:	20 81       	ld	r18, Z
 2c6:	25 bb       	out	0x15, r18	; 21
 2c8:	ed e0       	ldi	r30, 0x0D	; 13
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	ec 0f       	add	r30, r28
 2ce:	fd 1f       	adc	r31, r29
 2d0:	e8 0f       	add	r30, r24
 2d2:	f9 1f       	adc	r31, r25
 2d4:	20 81       	ld	r18, Z
 2d6:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
		if (i==1) PORTC |= 0x80; // 왼쪽에서 3번째 FND에는 소수점(.)을 찍음
 2da:	81 30       	cpi	r24, 0x01	; 1
 2dc:	91 05       	cpc	r25, r1
 2de:	19 f4       	brne	.+6      	; 0x2e6 <display_FND+0xfc>
 2e0:	25 b3       	in	r18, 0x15	; 21
 2e2:	20 68       	ori	r18, 0x80	; 128
 2e4:	25 bb       	out	0x15, r18	; 21
		if (i%2) _delay_ms(2); // 2번은 2ms 지연
 2e6:	80 ff       	sbrs	r24, 0
 2e8:	07 c0       	rjmp	.+14     	; 0x2f8 <display_FND+0x10e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ea:	ef e3       	ldi	r30, 0x3F	; 63
 2ec:	ff e1       	ldi	r31, 0x1F	; 31
 2ee:	31 97       	sbiw	r30, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <display_FND+0x104>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <display_FND+0x10a>
 2f4:	00 00       	nop
 2f6:	06 c0       	rjmp	.+12     	; 0x304 <display_FND+0x11a>
 2f8:	ef ed       	ldi	r30, 0xDF	; 223
 2fa:	fe e2       	ldi	r31, 0x2E	; 46
 2fc:	31 97       	sbiw	r30, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <display_FND+0x112>
 300:	00 c0       	rjmp	.+0      	; 0x302 <display_FND+0x118>
 302:	00 00       	nop
	num[1] = value_int % 10;
	num[0] = (value_deci == 0x80) ? 5 : 0; // 소수 첫째자리가 1이면 0.5에 해당하므로 5를 디스플레이
	
	if(value_int >= 30 || value_int < 20) buzzer_onoff = !buzzer_onoff;
	tone_buzzer();
	for(i=0; i<4; i++){
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	84 30       	cpi	r24, 0x04	; 4
 308:	91 05       	cpc	r25, r1
 30a:	74 f2       	brlt	.-100    	; 0x2a8 <display_FND+0xbe>
		PORTC = digit[num[i]]; PORTG = fnd_sel[i];
		if (i==1) PORTC |= 0x80; // 왼쪽에서 3번째 FND에는 소수점(.)을 찍음
		if (i%2) _delay_ms(2); // 2번은 2ms 지연
		else _delay_ms(3); // 2번은 3ms 지연, 총 10ms 지연
	}
}
 30c:	68 96       	adiw	r28, 0x18	; 24
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	f8 94       	cli
 312:	de bf       	out	0x3e, r29	; 62
 314:	0f be       	out	0x3f, r0	; 63
 316:	cd bf       	out	0x3d, r28	; 61
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	1f 91       	pop	r17
 31e:	0f 91       	pop	r16
 320:	08 95       	ret

00000322 <main>:
void tone_buzzer(void);

int buzzer_onoff = 0;
int main(){
	int i, temperature;
	init_twi_port(); // TWI 및 포트 초기화
 322:	d2 de       	rcall	.-604    	; 0xc8 <init_twi_port>
	while (1){ // 온도 값 읽어 FND 디스플레이
		for (i=0; i<30; i++){
 324:	c0 e0       	ldi	r28, 0x00	; 0
 326:	d0 e0       	ldi	r29, 0x00	; 0
 328:	08 c0       	rjmp	.+16     	; 0x33a <main+0x18>
			if (i == 0) temperature = read_twi_2byte_nopreset(LM75A_TEMP_REG);
 32a:	20 97       	sbiw	r28, 0x00	; 0
 32c:	19 f4       	brne	.+6      	; 0x334 <main+0x12>
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	d8 de       	rcall	.-592    	; 0xe2 <read_twi_2byte_nopreset>
 332:	8c 01       	movw	r16, r24
			// 온도 측정 엑세스 최소 시간(300ms) 동안 기다리기 위해 30번에 1번만 엑세스 함
			display_FND(temperature); // 1번 디스플레이에 약 10ms 소요
 334:	c8 01       	movw	r24, r16
 336:	59 df       	rcall	.-334    	; 0x1ea <display_FND>
 338:	21 96       	adiw	r28, 0x01	; 1
int buzzer_onoff = 0;
int main(){
	int i, temperature;
	init_twi_port(); // TWI 및 포트 초기화
	while (1){ // 온도 값 읽어 FND 디스플레이
		for (i=0; i<30; i++){
 33a:	ce 31       	cpi	r28, 0x1E	; 30
 33c:	d1 05       	cpc	r29, r1
 33e:	ac f3       	brlt	.-22     	; 0x32a <main+0x8>
 340:	f1 cf       	rjmp	.-30     	; 0x324 <main+0x2>

00000342 <__divmodhi4>:
 342:	97 fb       	bst	r25, 7
 344:	07 2e       	mov	r0, r23
 346:	16 f4       	brtc	.+4      	; 0x34c <__divmodhi4+0xa>
 348:	00 94       	com	r0
 34a:	06 d0       	rcall	.+12     	; 0x358 <__divmodhi4_neg1>
 34c:	77 fd       	sbrc	r23, 7
 34e:	08 d0       	rcall	.+16     	; 0x360 <__divmodhi4_neg2>
 350:	0b d0       	rcall	.+22     	; 0x368 <__udivmodhi4>
 352:	07 fc       	sbrc	r0, 7
 354:	05 d0       	rcall	.+10     	; 0x360 <__divmodhi4_neg2>
 356:	3e f4       	brtc	.+14     	; 0x366 <__divmodhi4_exit>

00000358 <__divmodhi4_neg1>:
 358:	90 95       	com	r25
 35a:	81 95       	neg	r24
 35c:	9f 4f       	sbci	r25, 0xFF	; 255
 35e:	08 95       	ret

00000360 <__divmodhi4_neg2>:
 360:	70 95       	com	r23
 362:	61 95       	neg	r22
 364:	7f 4f       	sbci	r23, 0xFF	; 255

00000366 <__divmodhi4_exit>:
 366:	08 95       	ret

00000368 <__udivmodhi4>:
 368:	aa 1b       	sub	r26, r26
 36a:	bb 1b       	sub	r27, r27
 36c:	51 e1       	ldi	r21, 0x11	; 17
 36e:	07 c0       	rjmp	.+14     	; 0x37e <__udivmodhi4_ep>

00000370 <__udivmodhi4_loop>:
 370:	aa 1f       	adc	r26, r26
 372:	bb 1f       	adc	r27, r27
 374:	a6 17       	cp	r26, r22
 376:	b7 07       	cpc	r27, r23
 378:	10 f0       	brcs	.+4      	; 0x37e <__udivmodhi4_ep>
 37a:	a6 1b       	sub	r26, r22
 37c:	b7 0b       	sbc	r27, r23

0000037e <__udivmodhi4_ep>:
 37e:	88 1f       	adc	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	5a 95       	dec	r21
 384:	a9 f7       	brne	.-22     	; 0x370 <__udivmodhi4_loop>
 386:	80 95       	com	r24
 388:	90 95       	com	r25
 38a:	bc 01       	movw	r22, r24
 38c:	cd 01       	movw	r24, r26
 38e:	08 95       	ret

00000390 <_exit>:
 390:	f8 94       	cli

00000392 <__stop_program>:
 392:	ff cf       	rjmp	.-2      	; 0x392 <__stop_program>
