
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000212  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a6d  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000843  00000000  00000000  00000d29  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000356  00000000  00000000  0000156c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000018c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fd  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000050  00000000  00000000  00001d15  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001d65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	14 d0       	rcall	.+40     	; 0xc2 <main>
  9a:	8f c0       	rjmp	.+286    	; 0x1ba <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <init_uart0>:
#define F_CPU 16000000UL
#include <util/delay.h>

void init_uart0()
{
	UCSR0B = 0x18;
  9e:	88 e1       	ldi	r24, 0x18	; 24
  a0:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0x06;
  a2:	86 e0       	ldi	r24, 0x06	; 6
  a4:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UBRR0H = 0; UBRR0L = 103;
  a8:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  ac:	87 e6       	ldi	r24, 0x67	; 103
  ae:	89 b9       	out	0x09, r24	; 9
  b0:	08 95       	ret

000000b2 <putchar0>:
}

void putchar0(char c) {
	while(!(UCSR0A & (1<<UDRE0)));
  b2:	5d 9b       	sbis	0x0b, 5	; 11
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <putchar0>
		UDR0 = c;
  b6:	8c b9       	out	0x0c, r24	; 12
  b8:	08 95       	ret

000000ba <getchar0>:
}

char getchar0(){
	while(!(UCSR0A & (1 <<RXC0)));
  ba:	5f 9b       	sbis	0x0b, 7	; 11
  bc:	fe cf       	rjmp	.-4      	; 0xba <getchar0>
	return(UDR0);
  be:	8c b1       	in	r24, 0x0c	; 12
}
  c0:	08 95       	ret

000000c2 <main>:

int main()
{
	char value;
	init_uart0();
  c2:	ed df       	rcall	.-38     	; 0x9e <init_uart0>
	while(1){
		putchar0('>');
  c4:	8e e3       	ldi	r24, 0x3E	; 62
  c6:	f5 df       	rcall	.-22     	; 0xb2 <putchar0>
		putchar0('>');
  c8:	8e e3       	ldi	r24, 0x3E	; 62
  ca:	f3 df       	rcall	.-26     	; 0xb2 <putchar0>
		value = getchar0();
  cc:	f6 df       	rcall	.-20     	; 0xba <getchar0>
  ce:	d8 2e       	mov	r13, r24
		putchar0(value);
  d0:	f0 df       	rcall	.-32     	; 0xb2 <putchar0>
		putchar0('\r');
  d2:	8d e0       	ldi	r24, 0x0D	; 13
  d4:	ee df       	rcall	.-36     	; 0xb2 <putchar0>
  d6:	8a e0       	ldi	r24, 0x0A	; 10
		putchar0('\n');
  d8:	ec df       	rcall	.-40     	; 0xb2 <putchar0>
  da:	8f ec       	ldi	r24, 0xCF	; 207
  dc:	8d 0d       	add	r24, r13
		
		if((value >= '1') && (value <= '9'))
  de:	89 30       	cpi	r24, 0x09	; 9
  e0:	88 f1       	brcs	.+98     	; 0x144 <main+0x82>
  e2:	39 c0       	rjmp	.+114    	; 0x156 <main+0x94>
  e4:	2d 2d       	mov	r18, r13
  e6:	30 e0       	ldi	r19, 0x00	; 0
		{
			for(int i = 1; i < 10; i++)
			{
				int ans[2] = {0, 0};
				int res = (value - 48) * i;
  e8:	20 53       	subi	r18, 0x30	; 48
  ea:	31 09       	sbc	r19, r1
  ec:	c2 9f       	mul	r28, r18
  ee:	c0 01       	movw	r24, r0
  f0:	c3 9f       	mul	r28, r19
  f2:	90 0d       	add	r25, r0
  f4:	d2 9f       	mul	r29, r18
  f6:	90 0d       	add	r25, r0
  f8:	11 24       	eor	r1, r1
  fa:	6a e0       	ldi	r22, 0x0A	; 10
				ans[1] = (res/10) + 48;
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	36 d0       	rcall	.+108    	; 0x16c <__divmodhi4>
 100:	7b 01       	movw	r14, r22
 102:	20 e3       	ldi	r18, 0x30	; 48
 104:	e2 0e       	add	r14, r18
 106:	f1 1c       	adc	r15, r1
				ans[0] = (res%10) + 48;
 108:	8c 01       	movw	r16, r24
 10a:	00 5d       	subi	r16, 0xD0	; 208
				
				putchar0(value);
 10c:	1f 4f       	sbci	r17, 0xFF	; 255
 10e:	8d 2d       	mov	r24, r13
				putchar0(' ');
 110:	d0 df       	rcall	.-96     	; 0xb2 <putchar0>
 112:	80 e2       	ldi	r24, 0x20	; 32
				putchar0('x');
 114:	ce df       	rcall	.-100    	; 0xb2 <putchar0>
 116:	88 e7       	ldi	r24, 0x78	; 120
				putchar0(' ');
 118:	cc df       	rcall	.-104    	; 0xb2 <putchar0>
 11a:	80 e2       	ldi	r24, 0x20	; 32
				putchar0((i+48)); //Number -> Ascii Code
 11c:	ca df       	rcall	.-108    	; 0xb2 <putchar0>
 11e:	8c 2f       	mov	r24, r28
				putchar0(' ');
 120:	80 5d       	subi	r24, 0xD0	; 208
 122:	c7 df       	rcall	.-114    	; 0xb2 <putchar0>
				putchar0('=');
 124:	80 e2       	ldi	r24, 0x20	; 32
 126:	c5 df       	rcall	.-118    	; 0xb2 <putchar0>
 128:	8d e3       	ldi	r24, 0x3D	; 61
				putchar0(' ');
 12a:	c3 df       	rcall	.-122    	; 0xb2 <putchar0>
 12c:	80 e2       	ldi	r24, 0x20	; 32
 12e:	c1 df       	rcall	.-126    	; 0xb2 <putchar0>
				putchar0(ans[1]);
 130:	8e 2d       	mov	r24, r14
 132:	bf df       	rcall	.-130    	; 0xb2 <putchar0>
				putchar0(ans[0]);
 134:	80 2f       	mov	r24, r16
 136:	bd df       	rcall	.-134    	; 0xb2 <putchar0>
 138:	8d e0       	ldi	r24, 0x0D	; 13
				putchar0('\r');
 13a:	bb df       	rcall	.-138    	; 0xb2 <putchar0>
 13c:	8a e0       	ldi	r24, 0x0A	; 10
				putchar0('\n');
 13e:	b9 df       	rcall	.-142    	; 0xb2 <putchar0>
 140:	21 96       	adiw	r28, 0x01	; 1
		putchar0('\r');
		putchar0('\n');
		
		if((value >= '1') && (value <= '9'))
		{
			for(int i = 1; i < 10; i++)
 142:	02 c0       	rjmp	.+4      	; 0x148 <main+0x86>
 144:	c1 e0       	ldi	r28, 0x01	; 1
 146:	d0 e0       	ldi	r29, 0x00	; 0
 148:	ca 30       	cpi	r28, 0x0A	; 10
 14a:	d1 05       	cpc	r29, r1
 14c:	0c f4       	brge	.+2      	; 0x150 <main+0x8e>
 14e:	ca cf       	rjmp	.-108    	; 0xe4 <main+0x22>
				putchar0(ans[1]);
				putchar0(ans[0]);
				putchar0('\r');
				putchar0('\n');
			}
			putchar0('\n');
 150:	8a e0       	ldi	r24, 0x0A	; 10
 152:	af df       	rcall	.-162    	; 0xb2 <putchar0>
 154:	08 c0       	rjmp	.+16     	; 0x166 <main+0xa4>
 156:	8d e0       	ldi	r24, 0x0D	; 13
		}
		else if(value == '\r') putchar0('\n');
 158:	d8 12       	cpse	r13, r24
 15a:	03 c0       	rjmp	.+6      	; 0x162 <main+0xa0>
 15c:	8a e0       	ldi	r24, 0x0A	; 10
 15e:	a9 df       	rcall	.-174    	; 0xb2 <putchar0>
 160:	02 c0       	rjmp	.+4      	; 0x166 <main+0xa4>
 162:	8d 2d       	mov	r24, r13
 164:	a6 df       	rcall	.-180    	; 0xb2 <putchar0>
		else putchar0(value);
 166:	8a e0       	ldi	r24, 0x0A	; 10
 168:	a4 df       	rcall	.-184    	; 0xb2 <putchar0>
 16a:	ac cf       	rjmp	.-168    	; 0xc4 <main+0x2>

0000016c <__divmodhi4>:
		putchar0('\n');
 16c:	97 fb       	bst	r25, 7
 16e:	07 2e       	mov	r0, r23
 170:	16 f4       	brtc	.+4      	; 0x176 <__divmodhi4+0xa>
	}
 172:	00 94       	com	r0
 174:	06 d0       	rcall	.+12     	; 0x182 <__divmodhi4_neg1>
 176:	77 fd       	sbrc	r23, 7
 178:	08 d0       	rcall	.+16     	; 0x18a <__divmodhi4_neg2>
 17a:	0b d0       	rcall	.+22     	; 0x192 <__udivmodhi4>
 17c:	07 fc       	sbrc	r0, 7
 17e:	05 d0       	rcall	.+10     	; 0x18a <__divmodhi4_neg2>
 180:	3e f4       	brtc	.+14     	; 0x190 <__divmodhi4_exit>

00000182 <__divmodhi4_neg1>:
 182:	90 95       	com	r25
 184:	81 95       	neg	r24
 186:	9f 4f       	sbci	r25, 0xFF	; 255
 188:	08 95       	ret

0000018a <__divmodhi4_neg2>:
 18a:	70 95       	com	r23
 18c:	61 95       	neg	r22
 18e:	7f 4f       	sbci	r23, 0xFF	; 255

00000190 <__divmodhi4_exit>:
 190:	08 95       	ret

00000192 <__udivmodhi4>:
 192:	aa 1b       	sub	r26, r26
 194:	bb 1b       	sub	r27, r27
 196:	51 e1       	ldi	r21, 0x11	; 17
 198:	07 c0       	rjmp	.+14     	; 0x1a8 <__udivmodhi4_ep>

0000019a <__udivmodhi4_loop>:
 19a:	aa 1f       	adc	r26, r26
 19c:	bb 1f       	adc	r27, r27
 19e:	a6 17       	cp	r26, r22
 1a0:	b7 07       	cpc	r27, r23
 1a2:	10 f0       	brcs	.+4      	; 0x1a8 <__udivmodhi4_ep>
 1a4:	a6 1b       	sub	r26, r22
 1a6:	b7 0b       	sbc	r27, r23

000001a8 <__udivmodhi4_ep>:
 1a8:	88 1f       	adc	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	5a 95       	dec	r21
 1ae:	a9 f7       	brne	.-22     	; 0x19a <__udivmodhi4_loop>
 1b0:	80 95       	com	r24
 1b2:	90 95       	com	r25
 1b4:	bc 01       	movw	r22, r24
 1b6:	cd 01       	movw	r24, r26
 1b8:	08 95       	ret

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
