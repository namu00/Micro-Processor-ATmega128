
MORTOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000190  00000204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000190  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000905  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ff  00000000  00000000  00000bad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f7  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  000016a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043c  00000000  00000000  00001720  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013c  00000000  00000000  00001b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001c98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	51 c0       	rjmp	.+162    	; 0xb8 <__vector_5>
  16:	00 00       	nop
  18:	73 c0       	rjmp	.+230    	; 0x100 <__vector_6>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e9       	ldi	r30, 0x90	; 144
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	4a d0       	rcall	.+148    	; 0x148 <main>
  b4:	6b c0       	rjmp	.+214    	; 0x18c <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <__vector_5>:
#define MOTOR_STOP 0x30

int state = MOTOR_STOP;

ISR(INT4_vect) //FORWARD
{
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	2f 93       	push	r18
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	80 e7       	ldi	r24, 0x70	; 112
  cc:	92 e0       	ldi	r25, 0x02	; 2
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <__vector_5+0x16>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <__vector_5+0x20>
  d8:	00 00       	nop
	_delay_ms(50);
	if((PINE & 0x10) == 0x10) return;
  da:	0c 99       	sbic	0x01, 4	; 1
  dc:	09 c0       	rjmp	.+18     	; 0xf0 <__vector_5+0x38>
	EIFR |= 1<<4;
  de:	88 b7       	in	r24, 0x38	; 56
  e0:	80 61       	ori	r24, 0x10	; 16
  e2:	88 bf       	out	0x38, r24	; 56
	state = MOTOR_CW;
  e4:	80 eb       	ldi	r24, 0xB0	; 176
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
  f0:	9f 91       	pop	r25
  f2:	8f 91       	pop	r24
  f4:	2f 91       	pop	r18
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <__vector_6>:

ISR(INT5_vect) //REVERSE
{
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	2f 93       	push	r18
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	80 e7       	ldi	r24, 0x70	; 112
 114:	92 e0       	ldi	r25, 0x02	; 2
 116:	21 50       	subi	r18, 0x01	; 1
 118:	80 40       	sbci	r24, 0x00	; 0
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <__vector_6+0x16>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <__vector_6+0x20>
 120:	00 00       	nop
	_delay_ms(50);
	if((PINE & 0x20) == 0x20) return;
 122:	0d 99       	sbic	0x01, 5	; 1
 124:	09 c0       	rjmp	.+18     	; 0x138 <__vector_6+0x38>
	EIFR |= 1<<5;
 126:	88 b7       	in	r24, 0x38	; 56
 128:	80 62       	ori	r24, 0x20	; 32
 12a:	88 bf       	out	0x38, r24	; 56
	state = MOTOR_CCW;
 12c:	80 e7       	ldi	r24, 0x70	; 112
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 134:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	2f 91       	pop	r18
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <main>:

int main(void)
{
	DDRB = 0xf0; //motor 1
 148:	80 ef       	ldi	r24, 0xF0	; 240
 14a:	87 bb       	out	0x17, r24	; 23
	DDRE = 0x00; //Switch
 14c:	12 b8       	out	0x02, r1	; 2
	DDRG = 0x03; //LED
 14e:	83 e0       	ldi	r24, 0x03	; 3
 150:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	EICRB = 0x0a;
 154:	8a e0       	ldi	r24, 0x0A	; 10
 156:	8a bf       	out	0x3a, r24	; 58
	EIMSK = 0x30;
 158:	80 e3       	ldi	r24, 0x30	; 48
 15a:	89 bf       	out	0x39, r24	; 57
	sei();
 15c:	78 94       	sei
	while(1)
	{	
		if(state == MOTOR_CW) PORTG = 0x01; //정방향 LED 점등
 15e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 162:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 166:	80 3b       	cpi	r24, 0xB0	; 176
 168:	91 05       	cpc	r25, r1
 16a:	21 f4       	brne	.+8      	; 0x174 <main+0x2c>
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 172:	08 c0       	rjmp	.+16     	; 0x184 <main+0x3c>
		else if(state == MOTOR_CCW) PORTG = 0x02; //역방향 LED 점등
 174:	80 37       	cpi	r24, 0x70	; 112
 176:	91 05       	cpc	r25, r1
 178:	21 f4       	brne	.+8      	; 0x182 <main+0x3a>
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 180:	01 c0       	rjmp	.+2      	; 0x184 <main+0x3c>
		else PORTC = 0x00;
 182:	15 ba       	out	0x15, r1	; 21
		
		PORTB = state;	
 184:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 188:	88 bb       	out	0x18, r24	; 24
	}	
 18a:	e9 cf       	rjmp	.-46     	; 0x15e <main+0x16>

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
