
CLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000021c  00000290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c64  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b2  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003df  00000000  00000000  00001872  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00001c54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000470  00000000  00000000  00001ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000363  00000000  00000000  00002150  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000024b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	51 c0       	rjmp	.+162    	; 0xb8 <__vector_5>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e1       	ldi	r30, 0x1C	; 28
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 31       	cpi	r26, 0x1C	; 28
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	7a d0       	rcall	.+244    	; 0x1a8 <main>
  b4:	b1 c0       	rjmp	.+354    	; 0x218 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <__vector_5>:
void CLCD_cmd(char); // 명령어 전송 함수
void CLCD_data(char);
void CLCD_puts(char *);

ISR(INT4_vect)
{
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	2f 93       	push	r18
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	8d ee       	ldi	r24, 0xED	; 237
  cc:	92 e0       	ldi	r25, 0x02	; 2
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <__vector_5+0x16>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <__vector_5+0x20>
  d8:	00 00       	nop
	_delay_ms(60);
	if((PINE & 0x10) == 0x10) return;
  da:	0c 99       	sbic	0x01, 4	; 1
  dc:	16 c0       	rjmp	.+44     	; 0x10a <__vector_5+0x52>
	
	EIFR |= 1 <<4;
  de:	88 b7       	in	r24, 0x38	; 56
  e0:	80 61       	ori	r24, 0x10	; 16
  e2:	88 bf       	out	0x38, r24	; 56
	if(state == OFF) state = ON;
  e4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <state>
  e8:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <state+0x1>
  ec:	0a 97       	sbiw	r24, 0x0a	; 10
  ee:	39 f4       	brne	.+14     	; 0xfe <__vector_5+0x46>
  f0:	8b e0       	ldi	r24, 0x0B	; 11
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <state+0x1>
  f8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <state>
  fc:	06 c0       	rjmp	.+12     	; 0x10a <__vector_5+0x52>
	else state = OFF;
  fe:	8a e0       	ldi	r24, 0x0A	; 10
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <state+0x1>
 106:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <state>
}
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	2f 91       	pop	r18
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <CLCD_data>:
	}
	
}

void CLCD_data(char data){
	PORTD = 0x04; // 0b00000100, E(4)=0, R/W(3)=0, RS(2)=1, 데이터 사이클 시작
 11a:	24 e0       	ldi	r18, 0x04	; 4
 11c:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	35 e0       	ldi	r19, 0x05	; 5
 120:	3a 95       	dec	r19
 122:	f1 f7       	brne	.-4      	; 0x120 <CLCD_data+0x6>
 124:	00 00       	nop
	_delay_us(1); //Setup Time
	PORTD = 0x14; //0b00010100, E(4)=1, R/W(3)=0, RS(2)=1, 명령어 활성화/Write/데이터 모드
 126:	94 e1       	ldi	r25, 0x14	; 20
 128:	92 bb       	out	0x12, r25	; 18
	PORTC = data & 0xf0; // 상위 4비트 전송
 12a:	38 2f       	mov	r19, r24
 12c:	30 7f       	andi	r19, 0xF0	; 240
 12e:	35 bb       	out	0x15, r19	; 21
	PORTD = 0x04; // 0b00000100, E(4)=0, R/W(3)=0, RS(2)=1, 연속 데이터 사이클(시작+종료)
 130:	22 bb       	out	0x12, r18	; 18
 132:	3a e0       	ldi	r19, 0x0A	; 10
 134:	3a 95       	dec	r19
 136:	f1 f7       	brne	.-4      	; 0x134 <CLCD_data+0x1a>
 138:	00 c0       	rjmp	.+0      	; 0x13a <CLCD_data+0x20>
	_delay_us(2); // 이전 사이클의 Hold Time & 다음 사이클의 Setup Time
	PORTD = 0x14; //0b00010100, E(4)=1, R/W(3)=0, RS(2)=1, 명령어 활성화/Write/데이터 모드
 13a:	92 bb       	out	0x12, r25	; 18
	PORTC = (data << 4) & 0xf0; // 하위 4비트 전송
 13c:	30 e1       	ldi	r19, 0x10	; 16
 13e:	83 9f       	mul	r24, r19
 140:	c0 01       	movw	r24, r0
 142:	11 24       	eor	r1, r1
 144:	85 bb       	out	0x15, r24	; 21
	PORTD = 0x04; // 0b00000100, E(4)=0, R/W(3)=0, RS(2)=1, 명령어 사이클 종료
 146:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	8f e9       	ldi	r24, 0x9F	; 159
 14a:	9f e0       	ldi	r25, 0x0F	; 15
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <CLCD_data+0x32>
 150:	00 c0       	rjmp	.+0      	; 0x152 <CLCD_data+0x38>
 152:	00 00       	nop
 154:	08 95       	ret

00000156 <CLCD_puts>:
	_delay_ms(1);
}

void CLCD_puts(char *ptr){
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	ec 01       	movw	r28, r24
	while(*ptr != NULL)
 15c:	02 c0       	rjmp	.+4      	; 0x162 <CLCD_puts+0xc>
		CLCD_data(*ptr++);
 15e:	21 96       	adiw	r28, 0x01	; 1
 160:	dc df       	rcall	.-72     	; 0x11a <CLCD_data>
	PORTD = 0x04; // 0b00000100, E(4)=0, R/W(3)=0, RS(2)=1, 명령어 사이클 종료
	_delay_ms(1);
}

void CLCD_puts(char *ptr){
	while(*ptr != NULL)
 162:	88 81       	ld	r24, Y
 164:	81 11       	cpse	r24, r1
 166:	fb cf       	rjmp	.-10     	; 0x15e <CLCD_puts+0x8>
		CLCD_data(*ptr++);
}
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <CLCD_cmd>:

void CLCD_cmd(char cmd){
	PORTD = 0x00; // 0b00000000, E(4)=0, R/W(3)=0, RS(2)=0, 명령어 사이클 시작
 16e:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 170:	25 e0       	ldi	r18, 0x05	; 5
 172:	2a 95       	dec	r18
 174:	f1 f7       	brne	.-4      	; 0x172 <CLCD_cmd+0x4>
 176:	00 00       	nop
	_delay_us(1); //Setup Time
	PORTD = 0x10; //0b00010000, E(4)=1, R/W(3)=0, RS(2)=0, 명령어 활성화/Write/명령어 모드
 178:	90 e1       	ldi	r25, 0x10	; 16
 17a:	92 bb       	out	0x12, r25	; 18
	PORTC = cmd & 0xf0; // 상위 4비트 전송
 17c:	28 2f       	mov	r18, r24
 17e:	20 7f       	andi	r18, 0xF0	; 240
 180:	25 bb       	out	0x15, r18	; 21
	PORTD = 0x00; // 0b00000000, E(4)=0, R/W(3)=0, RS(2)=0, 연속 명령어 사이클(시작+종료)
 182:	12 ba       	out	0x12, r1	; 18
 184:	2a e0       	ldi	r18, 0x0A	; 10
 186:	2a 95       	dec	r18
 188:	f1 f7       	brne	.-4      	; 0x186 <CLCD_cmd+0x18>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <CLCD_cmd+0x1e>
	_delay_us(2); // 이전 사이클의 Hold Time & 다음 사이클의 Setup Time
	PORTD = 0x10; // 0b00010000, E(4)=1, R/W(3)=0, RS(2)=0, 명령어 활성화/Write/명령어 모드
 18c:	92 bb       	out	0x12, r25	; 18
	PORTC = (cmd << 4) & 0xf0; // 하위 4비트 전송
 18e:	20 e1       	ldi	r18, 0x10	; 16
 190:	82 9f       	mul	r24, r18
 192:	c0 01       	movw	r24, r0
 194:	11 24       	eor	r1, r1
 196:	85 bb       	out	0x15, r24	; 21
	PORTD = 0x00; // 0b00000000, E(4)=0, R/W(3)=0, RS(2)=0, 명령어 사이클 종료
 198:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	8f e9       	ldi	r24, 0x9F	; 159
 19c:	9f e0       	ldi	r25, 0x0F	; 15
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <CLCD_cmd+0x30>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <CLCD_cmd+0x36>
 1a4:	00 00       	nop
 1a6:	08 95       	ret

000001a8 <main>:
}
char motto1[] = "Life Companion";
char motto2[] = "JUST Do IT";

int main(void){
	DDRC = 0xff; // PORTC : 명령어/데이터 포트
 1a8:	8f ef       	ldi	r24, 0xFF	; 255
 1aa:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xff; // PORTD : 제어 포트
 1ac:	81 bb       	out	0x11, r24	; 17
 1ae:	2f ef       	ldi	r18, 0xFF	; 255
 1b0:	80 e7       	ldi	r24, 0x70	; 112
 1b2:	92 e0       	ldi	r25, 0x02	; 2
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	90 40       	sbci	r25, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <main+0xc>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0x16>
 1be:	00 00       	nop
	// 초기화 시작
	_delay_ms(50); // 전원 인가 후 CLCD 셋업 시간
	CLCD_cmd(BIT4_LINE2_DOT58); // 4 비트 모드, 2줄, 5x8도트
 1c0:	88 e2       	ldi	r24, 0x28	; 40
 1c2:	d5 df       	rcall	.-86     	; 0x16e <CLCD_cmd>
	CLCD_cmd(DISPON_CUROFF_BLKOFF); // 디스플레이 ON, 커서 OFF, 블링크 OFF
 1c4:	8c e0       	ldi	r24, 0x0C	; 12
 1c6:	d3 df       	rcall	.-90     	; 0x16e <CLCD_cmd>
	CLCD_cmd(INC_NOSHIFT); // 커서 증가, Delete/Insert
 1c8:	86 e0       	ldi	r24, 0x06	; 6
 1ca:	d1 df       	rcall	.-94     	; 0x16e <CLCD_cmd>
	CLCD_cmd(DISPCLEAR); // 디스플레이 클리어
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	cf df       	rcall	.-98     	; 0x16e <CLCD_cmd>
 1d0:	8f e3       	ldi	r24, 0x3F	; 63
 1d2:	9f e1       	ldi	r25, 0x1F	; 31
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <main+0x2c>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0x32>
 1da:	00 00       	nop
	_delay_ms(2); // 디스플레이 클리어 실행 시간 동안 대기
	// 초기화 끝
	CLCD_cmd(CUR1LINE);
 1dc:	80 e8       	ldi	r24, 0x80	; 128
 1de:	c7 df       	rcall	.-114    	; 0x16e <CLCD_cmd>
	CLCD_puts(motto1);
 1e0:	8b e0       	ldi	r24, 0x0B	; 11
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	b8 df       	rcall	.-144    	; 0x156 <CLCD_puts>
	CLCD_cmd(CUR2LINE);
 1e6:	80 ec       	ldi	r24, 0xC0	; 192
 1e8:	c2 df       	rcall	.-124    	; 0x16e <CLCD_cmd>
 1ea:	80 e0       	ldi	r24, 0x00	; 0
	CLCD_puts(motto2);
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	b3 df       	rcall	.-154    	; 0x156 <CLCD_puts>
 1f0:	12 b8       	out	0x02, r1	; 2
 1f2:	8a e0       	ldi	r24, 0x0A	; 10
	
	DDRE = 0x00;
 1f4:	8a bf       	out	0x3a, r24	; 58
	EICRB = 0x0a;
 1f6:	80 e3       	ldi	r24, 0x30	; 48
 1f8:	89 bf       	out	0x39, r24	; 57
	EIMSK = 0x30;
 1fa:	8f b7       	in	r24, 0x3f	; 63
 1fc:	80 68       	ori	r24, 0x80	; 128
	SREG |= 0x80;
 1fe:	8f bf       	out	0x3f, r24	; 63
 200:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <state>
	
	while(1)
	{
		if(state == ON) CLCD_cmd(DISPON_CUROFF_BLKOFF);
 204:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <state+0x1>
 208:	0b 97       	sbiw	r24, 0x0b	; 11
 20a:	19 f4       	brne	.+6      	; 0x212 <main+0x6a>
 20c:	8c e0       	ldi	r24, 0x0C	; 12
 20e:	af df       	rcall	.-162    	; 0x16e <CLCD_cmd>
 210:	f7 cf       	rjmp	.-18     	; 0x200 <main+0x58>
 212:	88 e0       	ldi	r24, 0x08	; 8
		else CLCD_cmd( DISPOFF_CUROFF_BLKOFF);
 214:	ac df       	rcall	.-168    	; 0x16e <CLCD_cmd>
 216:	f4 cf       	rjmp	.-24     	; 0x200 <main+0x58>

00000218 <_exit>:
 218:	f8 94       	cli

0000021a <__stop_program>:
 21a:	ff cf       	rjmp	.-2      	; 0x21a <__stop_program>
