
BLUETOOTH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000a12  00000a86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a12  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ad0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000eca  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000090c  00000000  00000000  00001a22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005ae  00000000  00000000  0000232e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  000028dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046c  00000000  00000000  000029bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000063a  00000000  00000000  00002e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00003462  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e1       	ldi	r30, 0x12	; 18
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 31       	cpi	r26, 0x1A	; 26
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0c d2       	rcall	.+1048   	; 0x4cc <main>
  b4:	ac c4       	rjmp	.+2392   	; 0xa0e <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <init_uart1>:


#define N2 100
void init_uart1( )
{ // UART1 초기화 함수
	UCSR1B = 0b00011000; // TX/RX 인에이블
  b8:	88 e1       	ldi	r24, 0x18	; 24
  ba:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UCSR1C = 0b00000110; // 8비트 데이터, 패리티 없음, 정지 비트 1비트
  be:	86 e0       	ldi	r24, 0x06	; 6
  c0:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	UBRR1H = 0; // 데이터율 세팅
  c4:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 8; // 16Mhz, 115200데이터율, 10진수
  c8:	88 e0       	ldi	r24, 0x08	; 8
  ca:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
  ce:	08 95       	ret

000000d0 <putchar1>:
}

void putchar1(char c)
{ // 문자 전송 함수
	while(!(UCSR1A & (1<<UDRE1))); // (1<<UDRE1)==0x20 (#define UDRE1 5)
  d0:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  d4:	95 ff       	sbrs	r25, 5
  d6:	fc cf       	rjmp	.-8      	; 0xd0 <putchar1>
	UDR1 = c; // 문자 전송
  d8:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  dc:	08 95       	ret

000000de <getchar1>:
}
char getchar1( )
{ // 문자 전송 함수
	while (!(UCSR1A & (1<<RXC1))); // (1<<RXC1)==0x80 (#define RXC1 7)
  de:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  e2:	88 23       	and	r24, r24
  e4:	e4 f7       	brge	.-8      	; 0xde <getchar1>
	return(UDR1); // 문자 수신
  e6:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
}
  ea:	08 95       	ret

000000ec <puts1>:
void puts1(char *ptr)
{ // 문자열 송신 함수
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	ec 01       	movw	r28, r24
	while (*ptr!=NULL) // 문자열의 마지막인지 검사
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <puts1+0xc>
	putchar1 (*ptr++); // 1문자 송신
  f4:	21 96       	adiw	r28, 0x01	; 1
  f6:	ec df       	rcall	.-40     	; 0xd0 <putchar1>
	while (!(UCSR1A & (1<<RXC1))); // (1<<RXC1)==0x80 (#define RXC1 7)
	return(UDR1); // 문자 수신
}
void puts1(char *ptr)
{ // 문자열 송신 함수
	while (*ptr!=NULL) // 문자열의 마지막인지 검사
  f8:	88 81       	ld	r24, Y
  fa:	81 11       	cpse	r24, r1
  fc:	fb cf       	rjmp	.-10     	; 0xf4 <puts1+0x8>
	putchar1 (*ptr++); // 1문자 송신
}
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <buzzer>:
void buzzer(int hz, int count)
{
 104:	2f 92       	push	r2
 106:	3f 92       	push	r3
 108:	4f 92       	push	r4
 10a:	5f 92       	push	r5
 10c:	6f 92       	push	r6
 10e:	7f 92       	push	r7
 110:	8f 92       	push	r8
 112:	9f 92       	push	r9
 114:	af 92       	push	r10
 116:	bf 92       	push	r11
 118:	cf 92       	push	r12
 11a:	df 92       	push	r13
 11c:	ef 92       	push	r14
 11e:	ff 92       	push	r15
 120:	0f 93       	push	r16
 122:	1f 93       	push	r17
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	64 97       	sbiw	r28, 0x14	; 20
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
 138:	1b 01       	movw	r2, r22
	int i, ms, us;
	ms = 1000/(2*hz);
 13a:	9c 01       	movw	r18, r24
 13c:	22 0f       	add	r18, r18
 13e:	33 1f       	adc	r19, r19
 140:	88 ee       	ldi	r24, 0xE8	; 232
 142:	93 e0       	ldi	r25, 0x03	; 3
 144:	b9 01       	movw	r22, r18
 146:	3c d4       	rcall	.+2168   	; 0x9c0 <__divmodhi4>
 148:	7a 83       	std	Y+2, r23	; 0x02
 14a:	69 83       	std	Y+1, r22	; 0x01
	us = (1000.0/(2*hz) - 1000/(2*hz)) * 1000;
 14c:	b9 01       	movw	r22, r18
 14e:	33 0f       	add	r19, r19
 150:	88 0b       	sbc	r24, r24
 152:	99 0b       	sbc	r25, r25
 154:	1e d3       	rcall	.+1596   	; 0x792 <__floatsisf>
 156:	9b 01       	movw	r18, r22
 158:	ac 01       	movw	r20, r24
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	8a e7       	ldi	r24, 0x7A	; 122
 160:	94 e4       	ldi	r25, 0x44	; 68
 162:	7c d2       	rcall	.+1272   	; 0x65c <__divsf3>
 164:	6b 01       	movw	r12, r22
 166:	7c 01       	movw	r14, r24
 168:	29 81       	ldd	r18, Y+1	; 0x01
 16a:	3a 81       	ldd	r19, Y+2	; 0x02
 16c:	b9 01       	movw	r22, r18
 16e:	33 0f       	add	r19, r19
 170:	88 0b       	sbc	r24, r24
 172:	99 0b       	sbc	r25, r25
 174:	0e d3       	rcall	.+1564   	; 0x792 <__floatsisf>
 176:	6d 83       	std	Y+5, r22	; 0x05
 178:	7e 83       	std	Y+6, r23	; 0x06
 17a:	8f 83       	std	Y+7, r24	; 0x07
 17c:	98 87       	std	Y+8, r25	; 0x08
 17e:	9b 01       	movw	r18, r22
 180:	ac 01       	movw	r20, r24
 182:	c7 01       	movw	r24, r14
 184:	b6 01       	movw	r22, r12
 186:	01 d2       	rcall	.+1026   	; 0x58a <__subsf3>
 188:	20 e0       	ldi	r18, 0x00	; 0
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	4a e7       	ldi	r20, 0x7A	; 122
 18e:	54 e4       	ldi	r21, 0x44	; 68
 190:	b4 d3       	rcall	.+1896   	; 0x8fa <__mulsf3>
 192:	cc d2       	rcall	.+1432   	; 0x72c <__fixsfsi>
 194:	8b 01       	movw	r16, r22
	for(i=0; i < count; i++ )
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	9c 8b       	std	Y+20, r25	; 0x14
 19c:	8b 8b       	std	Y+19, r24	; 0x13
 19e:	77 c1       	rjmp	.+750    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
	{
		PORTE |= 1 << 4;
 1a0:	83 b1       	in	r24, 0x03	; 3
 1a2:	80 61       	ori	r24, 0x10	; 16
 1a4:	83 b9       	out	0x03, r24	; 3

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	4a e7       	ldi	r20, 0x7A	; 122
 1ac:	55 e4       	ldi	r21, 0x45	; 69
 1ae:	6d 81       	ldd	r22, Y+5	; 0x05
 1b0:	7e 81       	ldd	r23, Y+6	; 0x06
 1b2:	8f 81       	ldd	r24, Y+7	; 0x07
 1b4:	98 85       	ldd	r25, Y+8	; 0x08
 1b6:	a1 d3       	rcall	.+1858   	; 0x8fa <__mulsf3>
 1b8:	6b 01       	movw	r12, r22
	if (__tmp < 1.0)
 1ba:	7c 01       	movw	r14, r24
 1bc:	20 e0       	ldi	r18, 0x00	; 0
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	40 e8       	ldi	r20, 0x80	; 128
 1c2:	5f e3       	ldi	r21, 0x3F	; 63
 1c4:	47 d2       	rcall	.+1166   	; 0x654 <__cmpsf2>
 1c6:	88 23       	and	r24, r24
		__ticks = 1;
	else if (__tmp > 65535)
 1c8:	14 f1       	brlt	.+68     	; 0x20e <buzzer+0x10a>
 1ca:	20 e0       	ldi	r18, 0x00	; 0
 1cc:	3f ef       	ldi	r19, 0xFF	; 255
 1ce:	4f e7       	ldi	r20, 0x7F	; 127
 1d0:	57 e4       	ldi	r21, 0x47	; 71
 1d2:	c7 01       	movw	r24, r14
 1d4:	b6 01       	movw	r22, r12
 1d6:	8d d3       	rcall	.+1818   	; 0x8f2 <__gesf2>
 1d8:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1da:	ac f4       	brge	.+42     	; 0x206 <buzzer+0x102>
 1dc:	20 e0       	ldi	r18, 0x00	; 0
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	40 e2       	ldi	r20, 0x20	; 32
 1e2:	51 e4       	ldi	r21, 0x41	; 65
 1e4:	6d 81       	ldd	r22, Y+5	; 0x05
 1e6:	7e 81       	ldd	r23, Y+6	; 0x06
 1e8:	8f 81       	ldd	r24, Y+7	; 0x07
 1ea:	98 85       	ldd	r25, Y+8	; 0x08
 1ec:	86 d3       	rcall	.+1804   	; 0x8fa <__mulsf3>
 1ee:	a3 d2       	rcall	.+1350   	; 0x736 <__fixunssfsi>
 1f0:	06 c0       	rjmp	.+12     	; 0x1fe <buzzer+0xfa>
 1f2:	80 e9       	ldi	r24, 0x90	; 144
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <buzzer+0xf2>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1fa:	61 50       	subi	r22, 0x01	; 1
 1fc:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1fe:	61 15       	cp	r22, r1
 200:	71 05       	cpc	r23, r1
 202:	b9 f7       	brne	.-18     	; 0x1f2 <buzzer+0xee>
 204:	09 c0       	rjmp	.+18     	; 0x218 <buzzer+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 206:	c7 01       	movw	r24, r14
 208:	b6 01       	movw	r22, r12
 20a:	95 d2       	rcall	.+1322   	; 0x736 <__fixunssfsi>
 20c:	02 c0       	rjmp	.+4      	; 0x212 <buzzer+0x10e>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	cb 01       	movw	r24, r22
 214:	01 97       	sbiw	r24, 0x01	; 1
		_delay_ms(ms);
		_delay_us(us);
 216:	f1 f7       	brne	.-4      	; 0x214 <buzzer+0x110>
 218:	b8 01       	movw	r22, r16
 21a:	01 2e       	mov	r0, r17
 21c:	00 0c       	add	r0, r0
 21e:	88 0b       	sbc	r24, r24
 220:	99 0b       	sbc	r25, r25
 222:	b7 d2       	rcall	.+1390   	; 0x792 <__floatsisf>
 224:	2b 01       	movw	r4, r22
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
 226:	3c 01       	movw	r6, r24
 228:	2b ea       	ldi	r18, 0xAB	; 171
 22a:	3a ea       	ldi	r19, 0xAA	; 170
 22c:	4a ea       	ldi	r20, 0xAA	; 170
 22e:	50 e4       	ldi	r21, 0x40	; 64
 230:	64 d3       	rcall	.+1736   	; 0x8fa <__mulsf3>
 232:	4b 01       	movw	r8, r22
 234:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
 236:	20 e0       	ldi	r18, 0x00	; 0
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	40 e8       	ldi	r20, 0x80	; 128
 23c:	50 e4       	ldi	r21, 0x40	; 64
 23e:	c3 01       	movw	r24, r6
 240:	b2 01       	movw	r22, r4
 242:	5b d3       	rcall	.+1718   	; 0x8fa <__mulsf3>
 244:	69 83       	std	Y+1, r22	; 0x01
 246:	7a 83       	std	Y+2, r23	; 0x02
 248:	8b 83       	std	Y+3, r24	; 0x03
 24a:	9c 83       	std	Y+4, r25	; 0x04
	if (__tmp < 1.0)
 24c:	20 e0       	ldi	r18, 0x00	; 0
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	40 e8       	ldi	r20, 0x80	; 128
 252:	5f e3       	ldi	r21, 0x3F	; 63
 254:	c5 01       	movw	r24, r10
 256:	b4 01       	movw	r22, r8
 258:	fd d1       	rcall	.+1018   	; 0x654 <__cmpsf2>
 25a:	88 23       	and	r24, r24
 25c:	0c f4       	brge	.+2      	; 0x260 <buzzer+0x15c>
 25e:	6a c0       	rjmp	.+212    	; 0x334 <buzzer+0x230>
		__ticks = 1;
	else if (__tmp2 > 65535)
 260:	20 e0       	ldi	r18, 0x00	; 0
 262:	3f ef       	ldi	r19, 0xFF	; 255
 264:	4f e7       	ldi	r20, 0x7F	; 127
 266:	57 e4       	ldi	r21, 0x47	; 71
 268:	69 81       	ldd	r22, Y+1	; 0x01
 26a:	7a 81       	ldd	r23, Y+2	; 0x02
 26c:	8b 81       	ldd	r24, Y+3	; 0x03
 26e:	9c 81       	ldd	r25, Y+4	; 0x04
 270:	40 d3       	rcall	.+1664   	; 0x8f2 <__gesf2>
 272:	18 16       	cp	r1, r24
 274:	0c f0       	brlt	.+2      	; 0x278 <buzzer+0x174>
	{
		_delay_ms(__us / 1000.0);
 276:	47 c0       	rjmp	.+142    	; 0x306 <buzzer+0x202>
 278:	20 e0       	ldi	r18, 0x00	; 0
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	4a e7       	ldi	r20, 0x7A	; 122
 27e:	54 e4       	ldi	r21, 0x44	; 68
 280:	c3 01       	movw	r24, r6
 282:	b2 01       	movw	r22, r4
 284:	eb d1       	rcall	.+982    	; 0x65c <__divsf3>
 286:	6f 87       	std	Y+15, r22	; 0x0f
 288:	78 8b       	std	Y+16, r23	; 0x10
 28a:	89 8b       	std	Y+17, r24	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 28c:	9a 8b       	std	Y+18, r25	; 0x12
 28e:	20 e0       	ldi	r18, 0x00	; 0
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	4a e7       	ldi	r20, 0x7A	; 122
 294:	55 e4       	ldi	r21, 0x45	; 69
 296:	31 d3       	rcall	.+1634   	; 0x8fa <__mulsf3>
 298:	6b 87       	std	Y+11, r22	; 0x0b
 29a:	7c 87       	std	Y+12, r23	; 0x0c
 29c:	8d 87       	std	Y+13, r24	; 0x0d
	if (__tmp < 1.0)
 29e:	9e 87       	std	Y+14, r25	; 0x0e
 2a0:	20 e0       	ldi	r18, 0x00	; 0
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	40 e8       	ldi	r20, 0x80	; 128
 2a6:	5f e3       	ldi	r21, 0x3F	; 63
 2a8:	d5 d1       	rcall	.+938    	; 0x654 <__cmpsf2>
 2aa:	88 23       	and	r24, r24
		__ticks = 1;
	else if (__tmp > 65535)
 2ac:	34 f1       	brlt	.+76     	; 0x2fa <buzzer+0x1f6>
 2ae:	20 e0       	ldi	r18, 0x00	; 0
 2b0:	3f ef       	ldi	r19, 0xFF	; 255
 2b2:	4f e7       	ldi	r20, 0x7F	; 127
 2b4:	57 e4       	ldi	r21, 0x47	; 71
 2b6:	6b 85       	ldd	r22, Y+11	; 0x0b
 2b8:	7c 85       	ldd	r23, Y+12	; 0x0c
 2ba:	8d 85       	ldd	r24, Y+13	; 0x0d
 2bc:	9e 85       	ldd	r25, Y+14	; 0x0e
 2be:	19 d3       	rcall	.+1586   	; 0x8f2 <__gesf2>
 2c0:	18 16       	cp	r1, r24
 2c2:	ac f4       	brge	.+42     	; 0x2ee <buzzer+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2c4:	20 e0       	ldi	r18, 0x00	; 0
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	40 e2       	ldi	r20, 0x20	; 32
 2ca:	51 e4       	ldi	r21, 0x41	; 65
 2cc:	6f 85       	ldd	r22, Y+15	; 0x0f
 2ce:	78 89       	ldd	r23, Y+16	; 0x10
 2d0:	89 89       	ldd	r24, Y+17	; 0x11
 2d2:	9a 89       	ldd	r25, Y+18	; 0x12
 2d4:	12 d3       	rcall	.+1572   	; 0x8fa <__mulsf3>
 2d6:	2f d2       	rcall	.+1118   	; 0x736 <__fixunssfsi>
 2d8:	06 c0       	rjmp	.+12     	; 0x2e6 <buzzer+0x1e2>
 2da:	80 e9       	ldi	r24, 0x90	; 144
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <buzzer+0x1da>
 2e2:	61 50       	subi	r22, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2e4:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2e6:	61 15       	cp	r22, r1
 2e8:	71 05       	cpc	r23, r1
 2ea:	b9 f7       	brne	.-18     	; 0x2da <buzzer+0x1d6>
 2ec:	25 c0       	rjmp	.+74     	; 0x338 <buzzer+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2ee:	6b 85       	ldd	r22, Y+11	; 0x0b
 2f0:	7c 85       	ldd	r23, Y+12	; 0x0c
 2f2:	8d 85       	ldd	r24, Y+13	; 0x0d
 2f4:	9e 85       	ldd	r25, Y+14	; 0x0e
 2f6:	1f d2       	rcall	.+1086   	; 0x736 <__fixunssfsi>
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <buzzer+0x1fa>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 2fa:	61 e0       	ldi	r22, 0x01	; 1
 2fc:	70 e0       	ldi	r23, 0x00	; 0
 2fe:	cb 01       	movw	r24, r22
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <buzzer+0x1fc>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 304:	19 c0       	rjmp	.+50     	; 0x338 <buzzer+0x234>
 306:	20 e0       	ldi	r18, 0x00	; 0
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	4f e7       	ldi	r20, 0x7F	; 127
 30c:	53 e4       	ldi	r21, 0x43	; 67
 30e:	c5 01       	movw	r24, r10
 310:	b4 01       	movw	r22, r8
 312:	ef d2       	rcall	.+1502   	; 0x8f2 <__gesf2>
 314:	18 16       	cp	r1, r24
 316:	4c f4       	brge	.+18     	; 0x32a <buzzer+0x226>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 318:	69 81       	ldd	r22, Y+1	; 0x01
 31a:	7a 81       	ldd	r23, Y+2	; 0x02
 31c:	8b 81       	ldd	r24, Y+3	; 0x03
 31e:	9c 81       	ldd	r25, Y+4	; 0x04
 320:	0a d2       	rcall	.+1044   	; 0x736 <__fixunssfsi>
 322:	cb 01       	movw	r24, r22
 324:	01 97       	sbiw	r24, 0x01	; 1
 326:	f1 f7       	brne	.-4      	; 0x324 <buzzer+0x220>
 328:	0a c0       	rjmp	.+20     	; 0x33e <buzzer+0x23a>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 32a:	c5 01       	movw	r24, r10
 32c:	b4 01       	movw	r22, r8
 32e:	03 d2       	rcall	.+1030   	; 0x736 <__fixunssfsi>
 330:	6a 87       	std	Y+10, r22	; 0x0a
 332:	02 c0       	rjmp	.+4      	; 0x338 <buzzer+0x234>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	9a 87       	std	Y+10, r25	; 0x0a
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 338:	8a 85       	ldd	r24, Y+10	; 0x0a
 33a:	8a 95       	dec	r24
 33c:	f1 f7       	brne	.-4      	; 0x33a <buzzer+0x236>
		PORTE &= ~(1 << 4);
 33e:	83 b1       	in	r24, 0x03	; 3
 340:	8f 7e       	andi	r24, 0xEF	; 239
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 342:	83 b9       	out	0x03, r24	; 3
 344:	20 e0       	ldi	r18, 0x00	; 0
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	40 e8       	ldi	r20, 0x80	; 128
 34a:	5f e3       	ldi	r21, 0x3F	; 63
 34c:	c7 01       	movw	r24, r14
 34e:	b6 01       	movw	r22, r12
 350:	81 d1       	rcall	.+770    	; 0x654 <__cmpsf2>
 352:	88 23       	and	r24, r24
 354:	14 f1       	brlt	.+68     	; 0x39a <buzzer+0x296>
		__ticks = 1;
	else if (__tmp > 65535)
 356:	20 e0       	ldi	r18, 0x00	; 0
 358:	3f ef       	ldi	r19, 0xFF	; 255
 35a:	4f e7       	ldi	r20, 0x7F	; 127
 35c:	57 e4       	ldi	r21, 0x47	; 71
 35e:	c7 01       	movw	r24, r14
 360:	b6 01       	movw	r22, r12
 362:	c7 d2       	rcall	.+1422   	; 0x8f2 <__gesf2>
 364:	18 16       	cp	r1, r24
 366:	ac f4       	brge	.+42     	; 0x392 <buzzer+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 368:	20 e0       	ldi	r18, 0x00	; 0
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	40 e2       	ldi	r20, 0x20	; 32
 36e:	51 e4       	ldi	r21, 0x41	; 65
 370:	6d 81       	ldd	r22, Y+5	; 0x05
 372:	7e 81       	ldd	r23, Y+6	; 0x06
 374:	8f 81       	ldd	r24, Y+7	; 0x07
 376:	98 85       	ldd	r25, Y+8	; 0x08
 378:	c0 d2       	rcall	.+1408   	; 0x8fa <__mulsf3>
 37a:	dd d1       	rcall	.+954    	; 0x736 <__fixunssfsi>
 37c:	06 c0       	rjmp	.+12     	; 0x38a <buzzer+0x286>
 37e:	80 e9       	ldi	r24, 0x90	; 144
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 380:	91 e0       	ldi	r25, 0x01	; 1
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <buzzer+0x27e>
 386:	61 50       	subi	r22, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 388:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 38a:	61 15       	cp	r22, r1
 38c:	71 05       	cpc	r23, r1
 38e:	b9 f7       	brne	.-18     	; 0x37e <buzzer+0x27a>
 390:	09 c0       	rjmp	.+18     	; 0x3a4 <buzzer+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 392:	c7 01       	movw	r24, r14
 394:	b6 01       	movw	r22, r12
 396:	cf d1       	rcall	.+926    	; 0x736 <__fixunssfsi>
 398:	02 c0       	rjmp	.+4      	; 0x39e <buzzer+0x29a>
 39a:	61 e0       	ldi	r22, 0x01	; 1

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	cb 01       	movw	r24, r22
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <buzzer+0x29c>
#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
 3a4:	20 e0       	ldi	r18, 0x00	; 0
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	40 e8       	ldi	r20, 0x80	; 128
 3aa:	5f e3       	ldi	r21, 0x3F	; 63
 3ac:	c5 01       	movw	r24, r10
 3ae:	b4 01       	movw	r22, r8
 3b0:	51 d1       	rcall	.+674    	; 0x654 <__cmpsf2>
 3b2:	88 23       	and	r24, r24
 3b4:	0c f4       	brge	.+2      	; 0x3b8 <buzzer+0x2b4>
		__ticks = 1;
	else if (__tmp2 > 65535)
 3b6:	60 c0       	rjmp	.+192    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 3b8:	20 e0       	ldi	r18, 0x00	; 0
 3ba:	3f ef       	ldi	r19, 0xFF	; 255
 3bc:	4f e7       	ldi	r20, 0x7F	; 127
 3be:	57 e4       	ldi	r21, 0x47	; 71
 3c0:	69 81       	ldd	r22, Y+1	; 0x01
 3c2:	7a 81       	ldd	r23, Y+2	; 0x02
 3c4:	8b 81       	ldd	r24, Y+3	; 0x03
 3c6:	9c 81       	ldd	r25, Y+4	; 0x04
 3c8:	94 d2       	rcall	.+1320   	; 0x8f2 <__gesf2>
 3ca:	18 16       	cp	r1, r24
 3cc:	0c f0       	brlt	.+2      	; 0x3d0 <buzzer+0x2cc>
	{
		_delay_ms(__us / 1000.0);
 3ce:	3d c0       	rjmp	.+122    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 3d0:	20 e0       	ldi	r18, 0x00	; 0
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	4a e7       	ldi	r20, 0x7A	; 122
 3d6:	54 e4       	ldi	r21, 0x44	; 68
 3d8:	c3 01       	movw	r24, r6
 3da:	b2 01       	movw	r22, r4
 3dc:	3f d1       	rcall	.+638    	; 0x65c <__divsf3>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 3de:	4b 01       	movw	r8, r22
 3e0:	5c 01       	movw	r10, r24
 3e2:	20 e0       	ldi	r18, 0x00	; 0
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	4a e7       	ldi	r20, 0x7A	; 122
 3e8:	55 e4       	ldi	r21, 0x45	; 69
 3ea:	87 d2       	rcall	.+1294   	; 0x8fa <__mulsf3>
 3ec:	6b 01       	movw	r12, r22
	if (__tmp < 1.0)
 3ee:	7c 01       	movw	r14, r24
 3f0:	20 e0       	ldi	r18, 0x00	; 0
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	40 e8       	ldi	r20, 0x80	; 128
 3f6:	5f e3       	ldi	r21, 0x3F	; 63
 3f8:	2d d1       	rcall	.+602    	; 0x654 <__cmpsf2>
 3fa:	88 23       	and	r24, r24
		__ticks = 1;
	else if (__tmp > 65535)
 3fc:	04 f1       	brlt	.+64     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 3fe:	20 e0       	ldi	r18, 0x00	; 0
 400:	3f ef       	ldi	r19, 0xFF	; 255
 402:	4f e7       	ldi	r20, 0x7F	; 127
 404:	57 e4       	ldi	r21, 0x47	; 71
 406:	c7 01       	movw	r24, r14
 408:	b6 01       	movw	r22, r12
 40a:	73 d2       	rcall	.+1254   	; 0x8f2 <__gesf2>
 40c:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 40e:	9c f4       	brge	.+38     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 410:	20 e0       	ldi	r18, 0x00	; 0
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	40 e2       	ldi	r20, 0x20	; 32
 416:	51 e4       	ldi	r21, 0x41	; 65
 418:	c5 01       	movw	r24, r10
 41a:	b4 01       	movw	r22, r8
 41c:	6e d2       	rcall	.+1244   	; 0x8fa <__mulsf3>
 41e:	8b d1       	rcall	.+790    	; 0x736 <__fixunssfsi>
 420:	06 c0       	rjmp	.+12     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 422:	80 e9       	ldi	r24, 0x90	; 144
 424:	91 e0       	ldi	r25, 0x01	; 1
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	f1 f7       	brne	.-4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 42a:	61 50       	subi	r22, 0x01	; 1
 42c:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 42e:	61 15       	cp	r22, r1
 430:	71 05       	cpc	r23, r1
 432:	b9 f7       	brne	.-18     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 434:	23 c0       	rjmp	.+70     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 436:	c7 01       	movw	r24, r14
 438:	b6 01       	movw	r22, r12
 43a:	7d d1       	rcall	.+762    	; 0x736 <__fixunssfsi>
 43c:	02 c0       	rjmp	.+4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 43e:	61 e0       	ldi	r22, 0x01	; 1

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 440:	70 e0       	ldi	r23, 0x00	; 0
 442:	cb 01       	movw	r24, r22
 444:	01 97       	sbiw	r24, 0x01	; 1
 446:	f1 f7       	brne	.-4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 448:	19 c0       	rjmp	.+50     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 44a:	20 e0       	ldi	r18, 0x00	; 0
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	4f e7       	ldi	r20, 0x7F	; 127
 450:	53 e4       	ldi	r21, 0x43	; 67
 452:	c5 01       	movw	r24, r10
 454:	b4 01       	movw	r22, r8
 456:	4d d2       	rcall	.+1178   	; 0x8f2 <__gesf2>
 458:	18 16       	cp	r1, r24
 45a:	4c f4       	brge	.+18     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 45c:	69 81       	ldd	r22, Y+1	; 0x01
 45e:	7a 81       	ldd	r23, Y+2	; 0x02
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 460:	8b 81       	ldd	r24, Y+3	; 0x03
 462:	9c 81       	ldd	r25, Y+4	; 0x04
 464:	68 d1       	rcall	.+720    	; 0x736 <__fixunssfsi>
 466:	cb 01       	movw	r24, r22
 468:	01 97       	sbiw	r24, 0x01	; 1
 46a:	f1 f7       	brne	.-4      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 46c:	0a c0       	rjmp	.+20     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 46e:	c5 01       	movw	r24, r10
 470:	b4 01       	movw	r22, r8
 472:	61 d1       	rcall	.+706    	; 0x736 <__fixunssfsi>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 474:	69 87       	std	Y+9, r22	; 0x09
 476:	02 c0       	rjmp	.+4      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 478:	91 e0       	ldi	r25, 0x01	; 1
 47a:	99 87       	std	Y+9, r25	; 0x09
 47c:	89 85       	ldd	r24, Y+9	; 0x09
 47e:	8a 95       	dec	r24
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
 480:	f1 f7       	brne	.-4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 482:	2b 89       	ldd	r18, Y+19	; 0x13
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 484:	3c 89       	ldd	r19, Y+20	; 0x14
 486:	2f 5f       	subi	r18, 0xFF	; 255
 488:	3f 4f       	sbci	r19, 0xFF	; 255
void buzzer(int hz, int count)
{
	int i, ms, us;
	ms = 1000/(2*hz);
	us = (1000.0/(2*hz) - 1000/(2*hz)) * 1000;
	for(i=0; i < count; i++ )
 48a:	3c 8b       	std	Y+20, r19	; 0x14
 48c:	2b 8b       	std	Y+19, r18	; 0x13
 48e:	8b 89       	ldd	r24, Y+19	; 0x13
 490:	9c 89       	ldd	r25, Y+20	; 0x14
 492:	82 15       	cp	r24, r2
 494:	93 05       	cpc	r25, r3
 496:	0c f4       	brge	.+2      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 498:	83 ce       	rjmp	.-762    	; 0x1a0 <buzzer+0x9c>
 49a:	64 96       	adiw	r28, 0x14	; 20
 49c:	0f b6       	in	r0, 0x3f	; 63
 49e:	f8 94       	cli
 4a0:	de bf       	out	0x3e, r29	; 62
		_delay_us(us);
		PORTE &= ~(1 << 4);
		_delay_ms(ms);
		_delay_us(us);	
	}
}
 4a2:	0f be       	out	0x3f, r0	; 63
 4a4:	cd bf       	out	0x3d, r28	; 61
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	1f 91       	pop	r17
 4ac:	0f 91       	pop	r16
 4ae:	ff 90       	pop	r15
 4b0:	ef 90       	pop	r14
 4b2:	df 90       	pop	r13
 4b4:	cf 90       	pop	r12
 4b6:	bf 90       	pop	r11
 4b8:	af 90       	pop	r10
 4ba:	9f 90       	pop	r9
 4bc:	8f 90       	pop	r8
 4be:	7f 90       	pop	r7
 4c0:	6f 90       	pop	r6
 4c2:	5f 90       	pop	r5
 4c4:	4f 90       	pop	r4
 4c6:	3f 90       	pop	r3
 4c8:	2f 90       	pop	r2
 4ca:	08 95       	ret

000004cc <main>:
 4cc:	80 e1       	ldi	r24, 0x10	; 16
 4ce:	82 b9       	out	0x02, r24	; 2
 4d0:	f3 dd       	rcall	.-1050   	; 0xb8 <init_uart1>
 4d2:	05 de       	rcall	.-1014   	; 0xde <getchar1>
	char c;
	DDRE = 0x10;
	init_uart1(); // UART1 초기화 함수
	while(1)
	{
		c = getchar1(); // 스마트폰으로 부터 1 문자 수신
 4d4:	c8 2f       	mov	r28, r24
		putchar1(c);
 4d6:	fc dd       	rcall	.-1032   	; 0xd0 <putchar1>
 4d8:	c1 33       	cpi	r28, 0x31	; 49
		if (c == '1')
 4da:	49 f4       	brne	.+18     	; 0x4ee <main+0x22>
		{
			puts1("Do");
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	91 e0       	ldi	r25, 0x01	; 1
 4e0:	05 de       	rcall	.-1014   	; 0xec <puts1>
 4e2:	6b e0       	ldi	r22, 0x0B	; 11
			buzzer(DO,DO);
 4e4:	72 e0       	ldi	r23, 0x02	; 2
 4e6:	8b e0       	ldi	r24, 0x0B	; 11
 4e8:	92 e0       	ldi	r25, 0x02	; 2
 4ea:	0c de       	rcall	.-1000   	; 0x104 <buzzer>
 4ec:	f2 cf       	rjmp	.-28     	; 0x4d2 <main+0x6>
 4ee:	c2 33       	cpi	r28, 0x32	; 50
		}
		else if(c == '2')
 4f0:	49 f4       	brne	.+18     	; 0x504 <main+0x38>
 4f2:	83 e0       	ldi	r24, 0x03	; 3
		{
			puts1("RE");
 4f4:	91 e0       	ldi	r25, 0x01	; 1
 4f6:	fa dd       	rcall	.-1036   	; 0xec <puts1>
 4f8:	6b e4       	ldi	r22, 0x4B	; 75
			buzzer(RE,RE);
 4fa:	72 e0       	ldi	r23, 0x02	; 2
 4fc:	8b e4       	ldi	r24, 0x4B	; 75
 4fe:	92 e0       	ldi	r25, 0x02	; 2
 500:	01 de       	rcall	.-1022   	; 0x104 <buzzer>
 502:	e7 cf       	rjmp	.-50     	; 0x4d2 <main+0x6>
 504:	c3 33       	cpi	r28, 0x33	; 51
		}
		else if(c == '3')
 506:	49 f4       	brne	.+18     	; 0x51a <main+0x4e>
 508:	86 e0       	ldi	r24, 0x06	; 6
		{
			puts1("MI");
 50a:	91 e0       	ldi	r25, 0x01	; 1
 50c:	ef dd       	rcall	.-1058   	; 0xec <puts1>
 50e:	63 e9       	ldi	r22, 0x93	; 147
			buzzer(MI,MI);
 510:	72 e0       	ldi	r23, 0x02	; 2
 512:	83 e9       	ldi	r24, 0x93	; 147
 514:	92 e0       	ldi	r25, 0x02	; 2
 516:	f6 dd       	rcall	.-1044   	; 0x104 <buzzer>
 518:	dc cf       	rjmp	.-72     	; 0x4d2 <main+0x6>
 51a:	c4 33       	cpi	r28, 0x34	; 52
		}
		else if(c == '4')
 51c:	49 f4       	brne	.+18     	; 0x530 <main+0x64>
		{
			puts1("FA");
 51e:	89 e0       	ldi	r24, 0x09	; 9
 520:	91 e0       	ldi	r25, 0x01	; 1
 522:	e4 dd       	rcall	.-1080   	; 0xec <puts1>
 524:	6c eb       	ldi	r22, 0xBC	; 188
			buzzer(FA,FA);
 526:	72 e0       	ldi	r23, 0x02	; 2
 528:	8c eb       	ldi	r24, 0xBC	; 188
 52a:	92 e0       	ldi	r25, 0x02	; 2
 52c:	eb dd       	rcall	.-1066   	; 0x104 <buzzer>
 52e:	d1 cf       	rjmp	.-94     	; 0x4d2 <main+0x6>
		}
		else if(c == '5')
 530:	c5 33       	cpi	r28, 0x35	; 53
 532:	49 f4       	brne	.+18     	; 0x546 <main+0x7a>
		{
			puts1("SOL");
 534:	8c e0       	ldi	r24, 0x0C	; 12
 536:	91 e0       	ldi	r25, 0x01	; 1
 538:	d9 dd       	rcall	.-1102   	; 0xec <puts1>
			buzzer(SOL,SOL);
 53a:	60 e1       	ldi	r22, 0x10	; 16
 53c:	73 e0       	ldi	r23, 0x03	; 3
 53e:	80 e1       	ldi	r24, 0x10	; 16
 540:	93 e0       	ldi	r25, 0x03	; 3
 542:	e0 dd       	rcall	.-1088   	; 0x104 <buzzer>
 544:	c6 cf       	rjmp	.-116    	; 0x4d2 <main+0x6>
		}
		else if(c == '6')
 546:	c6 33       	cpi	r28, 0x36	; 54
 548:	49 f4       	brne	.+18     	; 0x55c <main+0x90>
		{
			puts1("RA");
 54a:	80 e1       	ldi	r24, 0x10	; 16
 54c:	91 e0       	ldi	r25, 0x01	; 1
 54e:	ce dd       	rcall	.-1124   	; 0xec <puts1>
			buzzer(RA,RA);
 550:	60 e7       	ldi	r22, 0x70	; 112
 552:	73 e0       	ldi	r23, 0x03	; 3
 554:	80 e7       	ldi	r24, 0x70	; 112
 556:	93 e0       	ldi	r25, 0x03	; 3
 558:	d5 dd       	rcall	.-1110   	; 0x104 <buzzer>
 55a:	bb cf       	rjmp	.-138    	; 0x4d2 <main+0x6>
		}
		else if(c == '7')
 55c:	c7 33       	cpi	r28, 0x37	; 55
		{
			puts1("SI");
 55e:	49 f4       	brne	.+18     	; 0x572 <main+0xa6>
 560:	83 e1       	ldi	r24, 0x13	; 19
 562:	91 e0       	ldi	r25, 0x01	; 1
 564:	c3 dd       	rcall	.-1146   	; 0xec <puts1>
			buzzer(SI,SI);
 566:	6c ed       	ldi	r22, 0xDC	; 220
 568:	73 e0       	ldi	r23, 0x03	; 3
 56a:	8c ed       	ldi	r24, 0xDC	; 220
 56c:	93 e0       	ldi	r25, 0x03	; 3
 56e:	ca dd       	rcall	.-1132   	; 0x104 <buzzer>
 570:	b0 cf       	rjmp	.-160    	; 0x4d2 <main+0x6>
		}
		else if(c == '8')
 572:	c8 33       	cpi	r28, 0x38	; 56
 574:	09 f0       	breq	.+2      	; 0x578 <main+0xac>
 576:	ad cf       	rjmp	.-166    	; 0x4d2 <main+0x6>
		{
			puts1("DDO");
 578:	86 e1       	ldi	r24, 0x16	; 22
 57a:	91 e0       	ldi	r25, 0x01	; 1
 57c:	b7 dd       	rcall	.-1170   	; 0xec <puts1>
 57e:	67 e1       	ldi	r22, 0x17	; 23
			buzzer(DDO,DDO);
 580:	74 e0       	ldi	r23, 0x04	; 4
 582:	87 e1       	ldi	r24, 0x17	; 23
 584:	94 e0       	ldi	r25, 0x04	; 4
 586:	be dd       	rcall	.-1156   	; 0x104 <buzzer>
 588:	a4 cf       	rjmp	.-184    	; 0x4d2 <main+0x6>

0000058a <__subsf3>:
 58a:	50 58       	subi	r21, 0x80	; 128

0000058c <__addsf3>:
 58c:	bb 27       	eor	r27, r27
 58e:	aa 27       	eor	r26, r26
 590:	0e d0       	rcall	.+28     	; 0x5ae <__addsf3x>
 592:	75 c1       	rjmp	.+746    	; 0x87e <__fp_round>
 594:	66 d1       	rcall	.+716    	; 0x862 <__fp_pscA>
 596:	30 f0       	brcs	.+12     	; 0x5a4 <__addsf3+0x18>
 598:	6b d1       	rcall	.+726    	; 0x870 <__fp_pscB>
 59a:	20 f0       	brcs	.+8      	; 0x5a4 <__addsf3+0x18>
 59c:	31 f4       	brne	.+12     	; 0x5aa <__addsf3+0x1e>
 59e:	9f 3f       	cpi	r25, 0xFF	; 255
 5a0:	11 f4       	brne	.+4      	; 0x5a6 <__addsf3+0x1a>
 5a2:	1e f4       	brtc	.+6      	; 0x5aa <__addsf3+0x1e>
 5a4:	5b c1       	rjmp	.+694    	; 0x85c <__fp_nan>
 5a6:	0e f4       	brtc	.+2      	; 0x5aa <__addsf3+0x1e>
 5a8:	e0 95       	com	r30
 5aa:	e7 fb       	bst	r30, 7
 5ac:	51 c1       	rjmp	.+674    	; 0x850 <__fp_inf>

000005ae <__addsf3x>:
 5ae:	e9 2f       	mov	r30, r25
 5b0:	77 d1       	rcall	.+750    	; 0x8a0 <__fp_split3>
 5b2:	80 f3       	brcs	.-32     	; 0x594 <__addsf3+0x8>
 5b4:	ba 17       	cp	r27, r26
 5b6:	62 07       	cpc	r22, r18
 5b8:	73 07       	cpc	r23, r19
 5ba:	84 07       	cpc	r24, r20
 5bc:	95 07       	cpc	r25, r21
 5be:	18 f0       	brcs	.+6      	; 0x5c6 <__addsf3x+0x18>
 5c0:	71 f4       	brne	.+28     	; 0x5de <__addsf3x+0x30>
 5c2:	9e f5       	brtc	.+102    	; 0x62a <__addsf3x+0x7c>
 5c4:	8f c1       	rjmp	.+798    	; 0x8e4 <__fp_zero>
 5c6:	0e f4       	brtc	.+2      	; 0x5ca <__addsf3x+0x1c>
 5c8:	e0 95       	com	r30
 5ca:	0b 2e       	mov	r0, r27
 5cc:	ba 2f       	mov	r27, r26
 5ce:	a0 2d       	mov	r26, r0
 5d0:	0b 01       	movw	r0, r22
 5d2:	b9 01       	movw	r22, r18
 5d4:	90 01       	movw	r18, r0
 5d6:	0c 01       	movw	r0, r24
 5d8:	ca 01       	movw	r24, r20
 5da:	a0 01       	movw	r20, r0
 5dc:	11 24       	eor	r1, r1
 5de:	ff 27       	eor	r31, r31
 5e0:	59 1b       	sub	r21, r25
 5e2:	99 f0       	breq	.+38     	; 0x60a <__addsf3x+0x5c>
 5e4:	59 3f       	cpi	r21, 0xF9	; 249
 5e6:	50 f4       	brcc	.+20     	; 0x5fc <__addsf3x+0x4e>
 5e8:	50 3e       	cpi	r21, 0xE0	; 224
 5ea:	68 f1       	brcs	.+90     	; 0x646 <__addsf3x+0x98>
 5ec:	1a 16       	cp	r1, r26
 5ee:	f0 40       	sbci	r31, 0x00	; 0
 5f0:	a2 2f       	mov	r26, r18
 5f2:	23 2f       	mov	r18, r19
 5f4:	34 2f       	mov	r19, r20
 5f6:	44 27       	eor	r20, r20
 5f8:	58 5f       	subi	r21, 0xF8	; 248
 5fa:	f3 cf       	rjmp	.-26     	; 0x5e2 <__addsf3x+0x34>
 5fc:	46 95       	lsr	r20
 5fe:	37 95       	ror	r19
 600:	27 95       	ror	r18
 602:	a7 95       	ror	r26
 604:	f0 40       	sbci	r31, 0x00	; 0
 606:	53 95       	inc	r21
 608:	c9 f7       	brne	.-14     	; 0x5fc <__addsf3x+0x4e>
 60a:	7e f4       	brtc	.+30     	; 0x62a <__addsf3x+0x7c>
 60c:	1f 16       	cp	r1, r31
 60e:	ba 0b       	sbc	r27, r26
 610:	62 0b       	sbc	r22, r18
 612:	73 0b       	sbc	r23, r19
 614:	84 0b       	sbc	r24, r20
 616:	ba f0       	brmi	.+46     	; 0x646 <__addsf3x+0x98>
 618:	91 50       	subi	r25, 0x01	; 1
 61a:	a1 f0       	breq	.+40     	; 0x644 <__addsf3x+0x96>
 61c:	ff 0f       	add	r31, r31
 61e:	bb 1f       	adc	r27, r27
 620:	66 1f       	adc	r22, r22
 622:	77 1f       	adc	r23, r23
 624:	88 1f       	adc	r24, r24
 626:	c2 f7       	brpl	.-16     	; 0x618 <__addsf3x+0x6a>
 628:	0e c0       	rjmp	.+28     	; 0x646 <__addsf3x+0x98>
 62a:	ba 0f       	add	r27, r26
 62c:	62 1f       	adc	r22, r18
 62e:	73 1f       	adc	r23, r19
 630:	84 1f       	adc	r24, r20
 632:	48 f4       	brcc	.+18     	; 0x646 <__addsf3x+0x98>
 634:	87 95       	ror	r24
 636:	77 95       	ror	r23
 638:	67 95       	ror	r22
 63a:	b7 95       	ror	r27
 63c:	f7 95       	ror	r31
 63e:	9e 3f       	cpi	r25, 0xFE	; 254
 640:	08 f0       	brcs	.+2      	; 0x644 <__addsf3x+0x96>
 642:	b3 cf       	rjmp	.-154    	; 0x5aa <__addsf3+0x1e>
 644:	93 95       	inc	r25
 646:	88 0f       	add	r24, r24
 648:	08 f0       	brcs	.+2      	; 0x64c <__addsf3x+0x9e>
 64a:	99 27       	eor	r25, r25
 64c:	ee 0f       	add	r30, r30
 64e:	97 95       	ror	r25
 650:	87 95       	ror	r24
 652:	08 95       	ret

00000654 <__cmpsf2>:
 654:	d9 d0       	rcall	.+434    	; 0x808 <__fp_cmp>
 656:	08 f4       	brcc	.+2      	; 0x65a <__cmpsf2+0x6>
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	08 95       	ret

0000065c <__divsf3>:
 65c:	0c d0       	rcall	.+24     	; 0x676 <__divsf3x>
 65e:	0f c1       	rjmp	.+542    	; 0x87e <__fp_round>
 660:	07 d1       	rcall	.+526    	; 0x870 <__fp_pscB>
 662:	40 f0       	brcs	.+16     	; 0x674 <__divsf3+0x18>
 664:	fe d0       	rcall	.+508    	; 0x862 <__fp_pscA>
 666:	30 f0       	brcs	.+12     	; 0x674 <__divsf3+0x18>
 668:	21 f4       	brne	.+8      	; 0x672 <__divsf3+0x16>
 66a:	5f 3f       	cpi	r21, 0xFF	; 255
 66c:	19 f0       	breq	.+6      	; 0x674 <__divsf3+0x18>
 66e:	f0 c0       	rjmp	.+480    	; 0x850 <__fp_inf>
 670:	51 11       	cpse	r21, r1
 672:	39 c1       	rjmp	.+626    	; 0x8e6 <__fp_szero>
 674:	f3 c0       	rjmp	.+486    	; 0x85c <__fp_nan>

00000676 <__divsf3x>:
 676:	14 d1       	rcall	.+552    	; 0x8a0 <__fp_split3>
 678:	98 f3       	brcs	.-26     	; 0x660 <__divsf3+0x4>

0000067a <__divsf3_pse>:
 67a:	99 23       	and	r25, r25
 67c:	c9 f3       	breq	.-14     	; 0x670 <__divsf3+0x14>
 67e:	55 23       	and	r21, r21
 680:	b1 f3       	breq	.-20     	; 0x66e <__divsf3+0x12>
 682:	95 1b       	sub	r25, r21
 684:	55 0b       	sbc	r21, r21
 686:	bb 27       	eor	r27, r27
 688:	aa 27       	eor	r26, r26
 68a:	62 17       	cp	r22, r18
 68c:	73 07       	cpc	r23, r19
 68e:	84 07       	cpc	r24, r20
 690:	38 f0       	brcs	.+14     	; 0x6a0 <__divsf3_pse+0x26>
 692:	9f 5f       	subi	r25, 0xFF	; 255
 694:	5f 4f       	sbci	r21, 0xFF	; 255
 696:	22 0f       	add	r18, r18
 698:	33 1f       	adc	r19, r19
 69a:	44 1f       	adc	r20, r20
 69c:	aa 1f       	adc	r26, r26
 69e:	a9 f3       	breq	.-22     	; 0x68a <__divsf3_pse+0x10>
 6a0:	33 d0       	rcall	.+102    	; 0x708 <__divsf3_pse+0x8e>
 6a2:	0e 2e       	mov	r0, r30
 6a4:	3a f0       	brmi	.+14     	; 0x6b4 <__divsf3_pse+0x3a>
 6a6:	e0 e8       	ldi	r30, 0x80	; 128
 6a8:	30 d0       	rcall	.+96     	; 0x70a <__divsf3_pse+0x90>
 6aa:	91 50       	subi	r25, 0x01	; 1
 6ac:	50 40       	sbci	r21, 0x00	; 0
 6ae:	e6 95       	lsr	r30
 6b0:	00 1c       	adc	r0, r0
 6b2:	ca f7       	brpl	.-14     	; 0x6a6 <__divsf3_pse+0x2c>
 6b4:	29 d0       	rcall	.+82     	; 0x708 <__divsf3_pse+0x8e>
 6b6:	fe 2f       	mov	r31, r30
 6b8:	27 d0       	rcall	.+78     	; 0x708 <__divsf3_pse+0x8e>
 6ba:	66 0f       	add	r22, r22
 6bc:	77 1f       	adc	r23, r23
 6be:	88 1f       	adc	r24, r24
 6c0:	bb 1f       	adc	r27, r27
 6c2:	26 17       	cp	r18, r22
 6c4:	37 07       	cpc	r19, r23
 6c6:	48 07       	cpc	r20, r24
 6c8:	ab 07       	cpc	r26, r27
 6ca:	b0 e8       	ldi	r27, 0x80	; 128
 6cc:	09 f0       	breq	.+2      	; 0x6d0 <__divsf3_pse+0x56>
 6ce:	bb 0b       	sbc	r27, r27
 6d0:	80 2d       	mov	r24, r0
 6d2:	bf 01       	movw	r22, r30
 6d4:	ff 27       	eor	r31, r31
 6d6:	93 58       	subi	r25, 0x83	; 131
 6d8:	5f 4f       	sbci	r21, 0xFF	; 255
 6da:	2a f0       	brmi	.+10     	; 0x6e6 <__divsf3_pse+0x6c>
 6dc:	9e 3f       	cpi	r25, 0xFE	; 254
 6de:	51 05       	cpc	r21, r1
 6e0:	68 f0       	brcs	.+26     	; 0x6fc <__divsf3_pse+0x82>
 6e2:	b6 c0       	rjmp	.+364    	; 0x850 <__fp_inf>
 6e4:	00 c1       	rjmp	.+512    	; 0x8e6 <__fp_szero>
 6e6:	5f 3f       	cpi	r21, 0xFF	; 255
 6e8:	ec f3       	brlt	.-6      	; 0x6e4 <__divsf3_pse+0x6a>
 6ea:	98 3e       	cpi	r25, 0xE8	; 232
 6ec:	dc f3       	brlt	.-10     	; 0x6e4 <__divsf3_pse+0x6a>
 6ee:	86 95       	lsr	r24
 6f0:	77 95       	ror	r23
 6f2:	67 95       	ror	r22
 6f4:	b7 95       	ror	r27
 6f6:	f7 95       	ror	r31
 6f8:	9f 5f       	subi	r25, 0xFF	; 255
 6fa:	c9 f7       	brne	.-14     	; 0x6ee <__divsf3_pse+0x74>
 6fc:	88 0f       	add	r24, r24
 6fe:	91 1d       	adc	r25, r1
 700:	96 95       	lsr	r25
 702:	87 95       	ror	r24
 704:	97 f9       	bld	r25, 7
 706:	08 95       	ret
 708:	e1 e0       	ldi	r30, 0x01	; 1
 70a:	66 0f       	add	r22, r22
 70c:	77 1f       	adc	r23, r23
 70e:	88 1f       	adc	r24, r24
 710:	bb 1f       	adc	r27, r27
 712:	62 17       	cp	r22, r18
 714:	73 07       	cpc	r23, r19
 716:	84 07       	cpc	r24, r20
 718:	ba 07       	cpc	r27, r26
 71a:	20 f0       	brcs	.+8      	; 0x724 <__divsf3_pse+0xaa>
 71c:	62 1b       	sub	r22, r18
 71e:	73 0b       	sbc	r23, r19
 720:	84 0b       	sbc	r24, r20
 722:	ba 0b       	sbc	r27, r26
 724:	ee 1f       	adc	r30, r30
 726:	88 f7       	brcc	.-30     	; 0x70a <__divsf3_pse+0x90>
 728:	e0 95       	com	r30
 72a:	08 95       	ret

0000072c <__fixsfsi>:
 72c:	04 d0       	rcall	.+8      	; 0x736 <__fixunssfsi>
 72e:	68 94       	set
 730:	b1 11       	cpse	r27, r1
 732:	d9 c0       	rjmp	.+434    	; 0x8e6 <__fp_szero>
 734:	08 95       	ret

00000736 <__fixunssfsi>:
 736:	bc d0       	rcall	.+376    	; 0x8b0 <__fp_splitA>
 738:	88 f0       	brcs	.+34     	; 0x75c <__fixunssfsi+0x26>
 73a:	9f 57       	subi	r25, 0x7F	; 127
 73c:	90 f0       	brcs	.+36     	; 0x762 <__fixunssfsi+0x2c>
 73e:	b9 2f       	mov	r27, r25
 740:	99 27       	eor	r25, r25
 742:	b7 51       	subi	r27, 0x17	; 23
 744:	a0 f0       	brcs	.+40     	; 0x76e <__fixunssfsi+0x38>
 746:	d1 f0       	breq	.+52     	; 0x77c <__fixunssfsi+0x46>
 748:	66 0f       	add	r22, r22
 74a:	77 1f       	adc	r23, r23
 74c:	88 1f       	adc	r24, r24
 74e:	99 1f       	adc	r25, r25
 750:	1a f0       	brmi	.+6      	; 0x758 <__fixunssfsi+0x22>
 752:	ba 95       	dec	r27
 754:	c9 f7       	brne	.-14     	; 0x748 <__fixunssfsi+0x12>
 756:	12 c0       	rjmp	.+36     	; 0x77c <__fixunssfsi+0x46>
 758:	b1 30       	cpi	r27, 0x01	; 1
 75a:	81 f0       	breq	.+32     	; 0x77c <__fixunssfsi+0x46>
 75c:	c3 d0       	rcall	.+390    	; 0x8e4 <__fp_zero>
 75e:	b1 e0       	ldi	r27, 0x01	; 1
 760:	08 95       	ret
 762:	c0 c0       	rjmp	.+384    	; 0x8e4 <__fp_zero>
 764:	67 2f       	mov	r22, r23
 766:	78 2f       	mov	r23, r24
 768:	88 27       	eor	r24, r24
 76a:	b8 5f       	subi	r27, 0xF8	; 248
 76c:	39 f0       	breq	.+14     	; 0x77c <__fixunssfsi+0x46>
 76e:	b9 3f       	cpi	r27, 0xF9	; 249
 770:	cc f3       	brlt	.-14     	; 0x764 <__fixunssfsi+0x2e>
 772:	86 95       	lsr	r24
 774:	77 95       	ror	r23
 776:	67 95       	ror	r22
 778:	b3 95       	inc	r27
 77a:	d9 f7       	brne	.-10     	; 0x772 <__fixunssfsi+0x3c>
 77c:	3e f4       	brtc	.+14     	; 0x78c <__fixunssfsi+0x56>
 77e:	90 95       	com	r25
 780:	80 95       	com	r24
 782:	70 95       	com	r23
 784:	61 95       	neg	r22
 786:	7f 4f       	sbci	r23, 0xFF	; 255
 788:	8f 4f       	sbci	r24, 0xFF	; 255
 78a:	9f 4f       	sbci	r25, 0xFF	; 255
 78c:	08 95       	ret

0000078e <__floatunsisf>:
 78e:	e8 94       	clt
 790:	09 c0       	rjmp	.+18     	; 0x7a4 <__floatsisf+0x12>

00000792 <__floatsisf>:
 792:	97 fb       	bst	r25, 7
 794:	3e f4       	brtc	.+14     	; 0x7a4 <__floatsisf+0x12>
 796:	90 95       	com	r25
 798:	80 95       	com	r24
 79a:	70 95       	com	r23
 79c:	61 95       	neg	r22
 79e:	7f 4f       	sbci	r23, 0xFF	; 255
 7a0:	8f 4f       	sbci	r24, 0xFF	; 255
 7a2:	9f 4f       	sbci	r25, 0xFF	; 255
 7a4:	99 23       	and	r25, r25
 7a6:	a9 f0       	breq	.+42     	; 0x7d2 <__floatsisf+0x40>
 7a8:	f9 2f       	mov	r31, r25
 7aa:	96 e9       	ldi	r25, 0x96	; 150
 7ac:	bb 27       	eor	r27, r27
 7ae:	93 95       	inc	r25
 7b0:	f6 95       	lsr	r31
 7b2:	87 95       	ror	r24
 7b4:	77 95       	ror	r23
 7b6:	67 95       	ror	r22
 7b8:	b7 95       	ror	r27
 7ba:	f1 11       	cpse	r31, r1
 7bc:	f8 cf       	rjmp	.-16     	; 0x7ae <__floatsisf+0x1c>
 7be:	fa f4       	brpl	.+62     	; 0x7fe <__floatsisf+0x6c>
 7c0:	bb 0f       	add	r27, r27
 7c2:	11 f4       	brne	.+4      	; 0x7c8 <__floatsisf+0x36>
 7c4:	60 ff       	sbrs	r22, 0
 7c6:	1b c0       	rjmp	.+54     	; 0x7fe <__floatsisf+0x6c>
 7c8:	6f 5f       	subi	r22, 0xFF	; 255
 7ca:	7f 4f       	sbci	r23, 0xFF	; 255
 7cc:	8f 4f       	sbci	r24, 0xFF	; 255
 7ce:	9f 4f       	sbci	r25, 0xFF	; 255
 7d0:	16 c0       	rjmp	.+44     	; 0x7fe <__floatsisf+0x6c>
 7d2:	88 23       	and	r24, r24
 7d4:	11 f0       	breq	.+4      	; 0x7da <__floatsisf+0x48>
 7d6:	96 e9       	ldi	r25, 0x96	; 150
 7d8:	11 c0       	rjmp	.+34     	; 0x7fc <__floatsisf+0x6a>
 7da:	77 23       	and	r23, r23
 7dc:	21 f0       	breq	.+8      	; 0x7e6 <__floatsisf+0x54>
 7de:	9e e8       	ldi	r25, 0x8E	; 142
 7e0:	87 2f       	mov	r24, r23
 7e2:	76 2f       	mov	r23, r22
 7e4:	05 c0       	rjmp	.+10     	; 0x7f0 <__floatsisf+0x5e>
 7e6:	66 23       	and	r22, r22
 7e8:	71 f0       	breq	.+28     	; 0x806 <__floatsisf+0x74>
 7ea:	96 e8       	ldi	r25, 0x86	; 134
 7ec:	86 2f       	mov	r24, r22
 7ee:	70 e0       	ldi	r23, 0x00	; 0
 7f0:	60 e0       	ldi	r22, 0x00	; 0
 7f2:	2a f0       	brmi	.+10     	; 0x7fe <__floatsisf+0x6c>
 7f4:	9a 95       	dec	r25
 7f6:	66 0f       	add	r22, r22
 7f8:	77 1f       	adc	r23, r23
 7fa:	88 1f       	adc	r24, r24
 7fc:	da f7       	brpl	.-10     	; 0x7f4 <__floatsisf+0x62>
 7fe:	88 0f       	add	r24, r24
 800:	96 95       	lsr	r25
 802:	87 95       	ror	r24
 804:	97 f9       	bld	r25, 7
 806:	08 95       	ret

00000808 <__fp_cmp>:
 808:	99 0f       	add	r25, r25
 80a:	00 08       	sbc	r0, r0
 80c:	55 0f       	add	r21, r21
 80e:	aa 0b       	sbc	r26, r26
 810:	e0 e8       	ldi	r30, 0x80	; 128
 812:	fe ef       	ldi	r31, 0xFE	; 254
 814:	16 16       	cp	r1, r22
 816:	17 06       	cpc	r1, r23
 818:	e8 07       	cpc	r30, r24
 81a:	f9 07       	cpc	r31, r25
 81c:	c0 f0       	brcs	.+48     	; 0x84e <__fp_cmp+0x46>
 81e:	12 16       	cp	r1, r18
 820:	13 06       	cpc	r1, r19
 822:	e4 07       	cpc	r30, r20
 824:	f5 07       	cpc	r31, r21
 826:	98 f0       	brcs	.+38     	; 0x84e <__fp_cmp+0x46>
 828:	62 1b       	sub	r22, r18
 82a:	73 0b       	sbc	r23, r19
 82c:	84 0b       	sbc	r24, r20
 82e:	95 0b       	sbc	r25, r21
 830:	39 f4       	brne	.+14     	; 0x840 <__fp_cmp+0x38>
 832:	0a 26       	eor	r0, r26
 834:	61 f0       	breq	.+24     	; 0x84e <__fp_cmp+0x46>
 836:	23 2b       	or	r18, r19
 838:	24 2b       	or	r18, r20
 83a:	25 2b       	or	r18, r21
 83c:	21 f4       	brne	.+8      	; 0x846 <__fp_cmp+0x3e>
 83e:	08 95       	ret
 840:	0a 26       	eor	r0, r26
 842:	09 f4       	brne	.+2      	; 0x846 <__fp_cmp+0x3e>
 844:	a1 40       	sbci	r26, 0x01	; 1
 846:	a6 95       	lsr	r26
 848:	8f ef       	ldi	r24, 0xFF	; 255
 84a:	81 1d       	adc	r24, r1
 84c:	81 1d       	adc	r24, r1
 84e:	08 95       	ret

00000850 <__fp_inf>:
 850:	97 f9       	bld	r25, 7
 852:	9f 67       	ori	r25, 0x7F	; 127
 854:	80 e8       	ldi	r24, 0x80	; 128
 856:	70 e0       	ldi	r23, 0x00	; 0
 858:	60 e0       	ldi	r22, 0x00	; 0
 85a:	08 95       	ret

0000085c <__fp_nan>:
 85c:	9f ef       	ldi	r25, 0xFF	; 255
 85e:	80 ec       	ldi	r24, 0xC0	; 192
 860:	08 95       	ret

00000862 <__fp_pscA>:
 862:	00 24       	eor	r0, r0
 864:	0a 94       	dec	r0
 866:	16 16       	cp	r1, r22
 868:	17 06       	cpc	r1, r23
 86a:	18 06       	cpc	r1, r24
 86c:	09 06       	cpc	r0, r25
 86e:	08 95       	ret

00000870 <__fp_pscB>:
 870:	00 24       	eor	r0, r0
 872:	0a 94       	dec	r0
 874:	12 16       	cp	r1, r18
 876:	13 06       	cpc	r1, r19
 878:	14 06       	cpc	r1, r20
 87a:	05 06       	cpc	r0, r21
 87c:	08 95       	ret

0000087e <__fp_round>:
 87e:	09 2e       	mov	r0, r25
 880:	03 94       	inc	r0
 882:	00 0c       	add	r0, r0
 884:	11 f4       	brne	.+4      	; 0x88a <__fp_round+0xc>
 886:	88 23       	and	r24, r24
 888:	52 f0       	brmi	.+20     	; 0x89e <__fp_round+0x20>
 88a:	bb 0f       	add	r27, r27
 88c:	40 f4       	brcc	.+16     	; 0x89e <__fp_round+0x20>
 88e:	bf 2b       	or	r27, r31
 890:	11 f4       	brne	.+4      	; 0x896 <__fp_round+0x18>
 892:	60 ff       	sbrs	r22, 0
 894:	04 c0       	rjmp	.+8      	; 0x89e <__fp_round+0x20>
 896:	6f 5f       	subi	r22, 0xFF	; 255
 898:	7f 4f       	sbci	r23, 0xFF	; 255
 89a:	8f 4f       	sbci	r24, 0xFF	; 255
 89c:	9f 4f       	sbci	r25, 0xFF	; 255
 89e:	08 95       	ret

000008a0 <__fp_split3>:
 8a0:	57 fd       	sbrc	r21, 7
 8a2:	90 58       	subi	r25, 0x80	; 128
 8a4:	44 0f       	add	r20, r20
 8a6:	55 1f       	adc	r21, r21
 8a8:	59 f0       	breq	.+22     	; 0x8c0 <__fp_splitA+0x10>
 8aa:	5f 3f       	cpi	r21, 0xFF	; 255
 8ac:	71 f0       	breq	.+28     	; 0x8ca <__fp_splitA+0x1a>
 8ae:	47 95       	ror	r20

000008b0 <__fp_splitA>:
 8b0:	88 0f       	add	r24, r24
 8b2:	97 fb       	bst	r25, 7
 8b4:	99 1f       	adc	r25, r25
 8b6:	61 f0       	breq	.+24     	; 0x8d0 <__fp_splitA+0x20>
 8b8:	9f 3f       	cpi	r25, 0xFF	; 255
 8ba:	79 f0       	breq	.+30     	; 0x8da <__fp_splitA+0x2a>
 8bc:	87 95       	ror	r24
 8be:	08 95       	ret
 8c0:	12 16       	cp	r1, r18
 8c2:	13 06       	cpc	r1, r19
 8c4:	14 06       	cpc	r1, r20
 8c6:	55 1f       	adc	r21, r21
 8c8:	f2 cf       	rjmp	.-28     	; 0x8ae <__fp_split3+0xe>
 8ca:	46 95       	lsr	r20
 8cc:	f1 df       	rcall	.-30     	; 0x8b0 <__fp_splitA>
 8ce:	08 c0       	rjmp	.+16     	; 0x8e0 <__fp_splitA+0x30>
 8d0:	16 16       	cp	r1, r22
 8d2:	17 06       	cpc	r1, r23
 8d4:	18 06       	cpc	r1, r24
 8d6:	99 1f       	adc	r25, r25
 8d8:	f1 cf       	rjmp	.-30     	; 0x8bc <__fp_splitA+0xc>
 8da:	86 95       	lsr	r24
 8dc:	71 05       	cpc	r23, r1
 8de:	61 05       	cpc	r22, r1
 8e0:	08 94       	sec
 8e2:	08 95       	ret

000008e4 <__fp_zero>:
 8e4:	e8 94       	clt

000008e6 <__fp_szero>:
 8e6:	bb 27       	eor	r27, r27
 8e8:	66 27       	eor	r22, r22
 8ea:	77 27       	eor	r23, r23
 8ec:	cb 01       	movw	r24, r22
 8ee:	97 f9       	bld	r25, 7
 8f0:	08 95       	ret

000008f2 <__gesf2>:
 8f2:	8a df       	rcall	.-236    	; 0x808 <__fp_cmp>
 8f4:	08 f4       	brcc	.+2      	; 0x8f8 <__gesf2+0x6>
 8f6:	8f ef       	ldi	r24, 0xFF	; 255
 8f8:	08 95       	ret

000008fa <__mulsf3>:
 8fa:	0b d0       	rcall	.+22     	; 0x912 <__mulsf3x>
 8fc:	c0 cf       	rjmp	.-128    	; 0x87e <__fp_round>
 8fe:	b1 df       	rcall	.-158    	; 0x862 <__fp_pscA>
 900:	28 f0       	brcs	.+10     	; 0x90c <__mulsf3+0x12>
 902:	b6 df       	rcall	.-148    	; 0x870 <__fp_pscB>
 904:	18 f0       	brcs	.+6      	; 0x90c <__mulsf3+0x12>
 906:	95 23       	and	r25, r21
 908:	09 f0       	breq	.+2      	; 0x90c <__mulsf3+0x12>
 90a:	a2 cf       	rjmp	.-188    	; 0x850 <__fp_inf>
 90c:	a7 cf       	rjmp	.-178    	; 0x85c <__fp_nan>
 90e:	11 24       	eor	r1, r1
 910:	ea cf       	rjmp	.-44     	; 0x8e6 <__fp_szero>

00000912 <__mulsf3x>:
 912:	c6 df       	rcall	.-116    	; 0x8a0 <__fp_split3>
 914:	a0 f3       	brcs	.-24     	; 0x8fe <__mulsf3+0x4>

00000916 <__mulsf3_pse>:
 916:	95 9f       	mul	r25, r21
 918:	d1 f3       	breq	.-12     	; 0x90e <__mulsf3+0x14>
 91a:	95 0f       	add	r25, r21
 91c:	50 e0       	ldi	r21, 0x00	; 0
 91e:	55 1f       	adc	r21, r21
 920:	62 9f       	mul	r22, r18
 922:	f0 01       	movw	r30, r0
 924:	72 9f       	mul	r23, r18
 926:	bb 27       	eor	r27, r27
 928:	f0 0d       	add	r31, r0
 92a:	b1 1d       	adc	r27, r1
 92c:	63 9f       	mul	r22, r19
 92e:	aa 27       	eor	r26, r26
 930:	f0 0d       	add	r31, r0
 932:	b1 1d       	adc	r27, r1
 934:	aa 1f       	adc	r26, r26
 936:	64 9f       	mul	r22, r20
 938:	66 27       	eor	r22, r22
 93a:	b0 0d       	add	r27, r0
 93c:	a1 1d       	adc	r26, r1
 93e:	66 1f       	adc	r22, r22
 940:	82 9f       	mul	r24, r18
 942:	22 27       	eor	r18, r18
 944:	b0 0d       	add	r27, r0
 946:	a1 1d       	adc	r26, r1
 948:	62 1f       	adc	r22, r18
 94a:	73 9f       	mul	r23, r19
 94c:	b0 0d       	add	r27, r0
 94e:	a1 1d       	adc	r26, r1
 950:	62 1f       	adc	r22, r18
 952:	83 9f       	mul	r24, r19
 954:	a0 0d       	add	r26, r0
 956:	61 1d       	adc	r22, r1
 958:	22 1f       	adc	r18, r18
 95a:	74 9f       	mul	r23, r20
 95c:	33 27       	eor	r19, r19
 95e:	a0 0d       	add	r26, r0
 960:	61 1d       	adc	r22, r1
 962:	23 1f       	adc	r18, r19
 964:	84 9f       	mul	r24, r20
 966:	60 0d       	add	r22, r0
 968:	21 1d       	adc	r18, r1
 96a:	82 2f       	mov	r24, r18
 96c:	76 2f       	mov	r23, r22
 96e:	6a 2f       	mov	r22, r26
 970:	11 24       	eor	r1, r1
 972:	9f 57       	subi	r25, 0x7F	; 127
 974:	50 40       	sbci	r21, 0x00	; 0
 976:	8a f0       	brmi	.+34     	; 0x99a <__mulsf3_pse+0x84>
 978:	e1 f0       	breq	.+56     	; 0x9b2 <__mulsf3_pse+0x9c>
 97a:	88 23       	and	r24, r24
 97c:	4a f0       	brmi	.+18     	; 0x990 <__mulsf3_pse+0x7a>
 97e:	ee 0f       	add	r30, r30
 980:	ff 1f       	adc	r31, r31
 982:	bb 1f       	adc	r27, r27
 984:	66 1f       	adc	r22, r22
 986:	77 1f       	adc	r23, r23
 988:	88 1f       	adc	r24, r24
 98a:	91 50       	subi	r25, 0x01	; 1
 98c:	50 40       	sbci	r21, 0x00	; 0
 98e:	a9 f7       	brne	.-22     	; 0x97a <__mulsf3_pse+0x64>
 990:	9e 3f       	cpi	r25, 0xFE	; 254
 992:	51 05       	cpc	r21, r1
 994:	70 f0       	brcs	.+28     	; 0x9b2 <__mulsf3_pse+0x9c>
 996:	5c cf       	rjmp	.-328    	; 0x850 <__fp_inf>
 998:	a6 cf       	rjmp	.-180    	; 0x8e6 <__fp_szero>
 99a:	5f 3f       	cpi	r21, 0xFF	; 255
 99c:	ec f3       	brlt	.-6      	; 0x998 <__mulsf3_pse+0x82>
 99e:	98 3e       	cpi	r25, 0xE8	; 232
 9a0:	dc f3       	brlt	.-10     	; 0x998 <__mulsf3_pse+0x82>
 9a2:	86 95       	lsr	r24
 9a4:	77 95       	ror	r23
 9a6:	67 95       	ror	r22
 9a8:	b7 95       	ror	r27
 9aa:	f7 95       	ror	r31
 9ac:	e7 95       	ror	r30
 9ae:	9f 5f       	subi	r25, 0xFF	; 255
 9b0:	c1 f7       	brne	.-16     	; 0x9a2 <__mulsf3_pse+0x8c>
 9b2:	fe 2b       	or	r31, r30
 9b4:	88 0f       	add	r24, r24
 9b6:	91 1d       	adc	r25, r1
 9b8:	96 95       	lsr	r25
 9ba:	87 95       	ror	r24
 9bc:	97 f9       	bld	r25, 7
 9be:	08 95       	ret

000009c0 <__divmodhi4>:
 9c0:	97 fb       	bst	r25, 7
 9c2:	07 2e       	mov	r0, r23
 9c4:	16 f4       	brtc	.+4      	; 0x9ca <__divmodhi4+0xa>
 9c6:	00 94       	com	r0
 9c8:	06 d0       	rcall	.+12     	; 0x9d6 <__divmodhi4_neg1>
 9ca:	77 fd       	sbrc	r23, 7
 9cc:	08 d0       	rcall	.+16     	; 0x9de <__divmodhi4_neg2>
 9ce:	0b d0       	rcall	.+22     	; 0x9e6 <__udivmodhi4>
 9d0:	07 fc       	sbrc	r0, 7
 9d2:	05 d0       	rcall	.+10     	; 0x9de <__divmodhi4_neg2>
 9d4:	3e f4       	brtc	.+14     	; 0x9e4 <__divmodhi4_exit>

000009d6 <__divmodhi4_neg1>:
 9d6:	90 95       	com	r25
 9d8:	81 95       	neg	r24
 9da:	9f 4f       	sbci	r25, 0xFF	; 255
 9dc:	08 95       	ret

000009de <__divmodhi4_neg2>:
 9de:	70 95       	com	r23
 9e0:	61 95       	neg	r22
 9e2:	7f 4f       	sbci	r23, 0xFF	; 255

000009e4 <__divmodhi4_exit>:
 9e4:	08 95       	ret

000009e6 <__udivmodhi4>:
 9e6:	aa 1b       	sub	r26, r26
 9e8:	bb 1b       	sub	r27, r27
 9ea:	51 e1       	ldi	r21, 0x11	; 17
 9ec:	07 c0       	rjmp	.+14     	; 0x9fc <__udivmodhi4_ep>

000009ee <__udivmodhi4_loop>:
 9ee:	aa 1f       	adc	r26, r26
 9f0:	bb 1f       	adc	r27, r27
 9f2:	a6 17       	cp	r26, r22
 9f4:	b7 07       	cpc	r27, r23
 9f6:	10 f0       	brcs	.+4      	; 0x9fc <__udivmodhi4_ep>
 9f8:	a6 1b       	sub	r26, r22
 9fa:	b7 0b       	sbc	r27, r23

000009fc <__udivmodhi4_ep>:
 9fc:	88 1f       	adc	r24, r24
 9fe:	99 1f       	adc	r25, r25
 a00:	5a 95       	dec	r21
 a02:	a9 f7       	brne	.-22     	; 0x9ee <__udivmodhi4_loop>
 a04:	80 95       	com	r24
 a06:	90 95       	com	r25
 a08:	bc 01       	movw	r22, r24
 a0a:	cd 01       	movw	r24, r26
 a0c:	08 95       	ret

00000a0e <_exit>:
 a0e:	f8 94       	cli

00000a10 <__stop_program>:
 a10:	ff cf       	rjmp	.-2      	; 0xa10 <__stop_program>
