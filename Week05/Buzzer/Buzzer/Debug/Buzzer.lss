
Buzzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  000004e0  00000574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080017e  0080017e  000005f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000624  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000994  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000838  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000324  00000000  00000000  00001858  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044a  00000000  00000000  00001bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000139  00000000  00000000  0000201a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00002153  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ee       	ldi	r30, 0xE0	; 224
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 37       	cpi	r26, 0x7E	; 126
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e7       	ldi	r26, 0x7E	; 126
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 38       	cpi	r26, 0x82	; 130
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	37 d0       	rcall	.+110    	; 0x132 <main>
  c4:	0b c2       	rjmp	.+1046   	; 0x4dc <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:
int song[] = {SOL, MI, REST, MI, SOL, MI, DO, RE, MI, RE, DO, MI, SOL, DDO, SOL, DDO, SOL, DDO, SOL, MI, SOL, RE, FA, MI, RE, DO, EOS};
int time[] = {N4, N8, R, N8, N8, N8, N4, N4, N8, N8, N8, N8, N4, N8N16, N16, N8, N8, N8, N8, N4, N4, N8, N8, N8, N8, N4, N4};
char LED[] = {0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff, 0x00};
	
ISR (TIMER0_OVF_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
  da:	ef 93       	push	r30
  dc:	ff 93       	push	r31
	TCNT0 = f_table[tone];
  de:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <__data_end>
  e2:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <__data_end+0x1>
  e6:	eb 58       	subi	r30, 0x8B	; 139
  e8:	fe 4f       	sbci	r31, 0xFE	; 254
  ea:	80 81       	ld	r24, Z
  ec:	82 bf       	out	0x32, r24	; 50
	if (state == OFF)
  ee:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <state>
  f2:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <state+0x1>
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	41 f4       	brne	.+16     	; 0x10a <__vector_16+0x42>
	{
		PORTB |= 1 << 4;
  fa:	88 b3       	in	r24, 0x18	; 24
  fc:	80 61       	ori	r24, 0x10	; 16
  fe:	88 bb       	out	0x18, r24	; 24
		state = ON;
 100:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <state+0x1>
 104:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <state>
 108:	09 c0       	rjmp	.+18     	; 0x11c <__vector_16+0x54>
	}	
	else
	{
		PORTB &= ~(1<<4);
 10a:	88 b3       	in	r24, 0x18	; 24
 10c:	8f 7e       	andi	r24, 0xEF	; 239
 10e:	88 bb       	out	0x18, r24	; 24
		state = OFF;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <state+0x1>
 118:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <state>
	}
}
 11c:	ff 91       	pop	r31
 11e:	ef 91       	pop	r30
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	0f 90       	pop	r0
 126:	0b be       	out	0x3b, r0	; 59
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <main>:

int main(void)
{
	int i = 0;
	DDRC = 0xff;
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	84 bb       	out	0x14, r24	; 20
	DDRB |= 0x1;
 136:	87 b3       	in	r24, 0x17	; 23
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	87 bb       	out	0x17, r24	; 23
	TCCR0 = 0x03;
 13c:	83 e0       	ldi	r24, 0x03	; 3
 13e:	83 bf       	out	0x33, r24	; 51
	TIMSK = 0x01;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	87 bf       	out	0x37, r24	; 55
	TCNT0 = f_table[song[i]];
 144:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <song>
 148:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <song+0x1>
 14c:	eb 58       	subi	r30, 0x8B	; 139
 14e:	fe 4f       	sbci	r31, 0xFE	; 254
 150:	80 81       	ld	r24, Z
 152:	82 bf       	out	0x32, r24	; 50
	sei();
 154:	78 94       	sei
	
	while(1)
	{
		i = 0;
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	01 c0       	rjmp	.+2      	; 0x15e <main+0x2c>
		do{
			tone = song[i];
			if(tone == REST) PORTC = LED[song[i-1]];
			else PORTC = LED[tone];
			_delay_ms(time[i++]);
 15c:	ce 01       	movw	r24, r28
	
	while(1)
	{
		i = 0;
		do{
			tone = song[i];
 15e:	fc 01       	movw	r30, r24
 160:	ee 0f       	add	r30, r30
 162:	ff 1f       	adc	r31, r31
 164:	e1 5c       	subi	r30, 0xC1	; 193
 166:	fe 4f       	sbci	r31, 0xFE	; 254
 168:	20 81       	ld	r18, Z
 16a:	31 81       	ldd	r19, Z+1	; 0x01
 16c:	30 93 7f 01 	sts	0x017F, r19	; 0x80017f <__data_end+0x1>
 170:	20 93 7e 01 	sts	0x017E, r18	; 0x80017e <__data_end>
			if(tone == REST) PORTC = LED[song[i-1]];
 174:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <__data_end>
 178:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <__data_end+0x1>
 17c:	28 30       	cpi	r18, 0x08	; 8
 17e:	31 05       	cpc	r19, r1
 180:	71 f4       	brne	.+28     	; 0x19e <main+0x6c>
 182:	fc 01       	movw	r30, r24
 184:	31 97       	sbiw	r30, 0x01	; 1
 186:	ee 0f       	add	r30, r30
 188:	ff 1f       	adc	r31, r31
 18a:	e1 5c       	subi	r30, 0xC1	; 193
 18c:	fe 4f       	sbci	r31, 0xFE	; 254
 18e:	01 90       	ld	r0, Z+
 190:	f0 81       	ld	r31, Z
 192:	e0 2d       	mov	r30, r0
 194:	e0 50       	subi	r30, 0x00	; 0
 196:	ff 4f       	sbci	r31, 0xFF	; 255
 198:	20 81       	ld	r18, Z
 19a:	25 bb       	out	0x15, r18	; 21
 19c:	08 c0       	rjmp	.+16     	; 0x1ae <main+0x7c>
			else PORTC = LED[tone];
 19e:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <__data_end>
 1a2:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <__data_end+0x1>
 1a6:	e0 50       	subi	r30, 0x00	; 0
 1a8:	ff 4f       	sbci	r31, 0xFF	; 255
 1aa:	20 81       	ld	r18, Z
 1ac:	25 bb       	out	0x15, r18	; 21
			_delay_ms(time[i++]);
 1ae:	ec 01       	movw	r28, r24
 1b0:	21 96       	adiw	r28, 0x01	; 1
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	fc 01       	movw	r30, r24
 1b8:	e7 5f       	subi	r30, 0xF7	; 247
 1ba:	fe 4f       	sbci	r31, 0xFE	; 254
 1bc:	60 81       	ld	r22, Z
 1be:	71 81       	ldd	r23, Z+1	; 0x01
 1c0:	07 2e       	mov	r0, r23
 1c2:	00 0c       	add	r0, r0
 1c4:	88 0b       	sbc	r24, r24
 1c6:	99 0b       	sbc	r25, r25
 1c8:	72 d0       	rcall	.+228    	; 0x2ae <__floatsisf>
 1ca:	4b 01       	movw	r8, r22
 1cc:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1ce:	20 e0       	ldi	r18, 0x00	; 0
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	4a e7       	ldi	r20, 0x7A	; 122
 1d4:	55 e4       	ldi	r21, 0x45	; 69
 1d6:	f7 d0       	rcall	.+494    	; 0x3c6 <__mulsf3>
 1d8:	6b 01       	movw	r12, r22
 1da:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 1dc:	20 e0       	ldi	r18, 0x00	; 0
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	40 e8       	ldi	r20, 0x80	; 128
 1e2:	5f e3       	ldi	r21, 0x3F	; 63
 1e4:	32 d0       	rcall	.+100    	; 0x24a <__cmpsf2>
 1e6:	88 23       	and	r24, r24
 1e8:	04 f1       	brlt	.+64     	; 0x22a <main+0xf8>
		__ticks = 1;
	else if (__tmp > 65535)
 1ea:	20 e0       	ldi	r18, 0x00	; 0
 1ec:	3f ef       	ldi	r19, 0xFF	; 255
 1ee:	4f e7       	ldi	r20, 0x7F	; 127
 1f0:	57 e4       	ldi	r21, 0x47	; 71
 1f2:	c7 01       	movw	r24, r14
 1f4:	b6 01       	movw	r22, r12
 1f6:	e3 d0       	rcall	.+454    	; 0x3be <__gesf2>
 1f8:	18 16       	cp	r1, r24
 1fa:	9c f4       	brge	.+38     	; 0x222 <main+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	40 e2       	ldi	r20, 0x20	; 32
 202:	51 e4       	ldi	r21, 0x41	; 65
 204:	c5 01       	movw	r24, r10
 206:	b4 01       	movw	r22, r8
 208:	de d0       	rcall	.+444    	; 0x3c6 <__mulsf3>
 20a:	23 d0       	rcall	.+70     	; 0x252 <__fixunssfsi>
 20c:	06 c0       	rjmp	.+12     	; 0x21a <main+0xe8>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 20e:	80 e9       	ldi	r24, 0x90	; 144
 210:	91 e0       	ldi	r25, 0x01	; 1
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <main+0xe0>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 216:	61 50       	subi	r22, 0x01	; 1
 218:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 21a:	61 15       	cp	r22, r1
 21c:	71 05       	cpc	r23, r1
 21e:	b9 f7       	brne	.-18     	; 0x20e <main+0xdc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 220:	09 c0       	rjmp	.+18     	; 0x234 <main+0x102>
 222:	c7 01       	movw	r24, r14
 224:	b6 01       	movw	r22, r12
 226:	15 d0       	rcall	.+42     	; 0x252 <__fixunssfsi>
 228:	02 c0       	rjmp	.+4      	; 0x22e <main+0xfc>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	cb 01       	movw	r24, r22
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <main+0xfe>
		}while(song[i]!=EOS);
 234:	fe 01       	movw	r30, r28
 236:	ee 0f       	add	r30, r30
 238:	ff 1f       	adc	r31, r31
 23a:	e1 5c       	subi	r30, 0xC1	; 193
 23c:	fe 4f       	sbci	r31, 0xFE	; 254
 23e:	80 81       	ld	r24, Z
 240:	91 81       	ldd	r25, Z+1	; 0x01
 242:	01 96       	adiw	r24, 0x01	; 1
 244:	09 f0       	breq	.+2      	; 0x248 <main+0x116>
 246:	8a cf       	rjmp	.-236    	; 0x15c <main+0x2a>
 248:	86 cf       	rjmp	.-244    	; 0x156 <main+0x24>

0000024a <__cmpsf2>:
 24a:	6c d0       	rcall	.+216    	; 0x324 <__fp_cmp>
 24c:	08 f4       	brcc	.+2      	; 0x250 <__cmpsf2+0x6>
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	08 95       	ret

00000252 <__fixunssfsi>:
 252:	94 d0       	rcall	.+296    	; 0x37c <__fp_splitA>
 254:	88 f0       	brcs	.+34     	; 0x278 <__fixunssfsi+0x26>
 256:	9f 57       	subi	r25, 0x7F	; 127
 258:	90 f0       	brcs	.+36     	; 0x27e <__fixunssfsi+0x2c>
 25a:	b9 2f       	mov	r27, r25
 25c:	99 27       	eor	r25, r25
 25e:	b7 51       	subi	r27, 0x17	; 23
 260:	a0 f0       	brcs	.+40     	; 0x28a <__fixunssfsi+0x38>
 262:	d1 f0       	breq	.+52     	; 0x298 <__fixunssfsi+0x46>
 264:	66 0f       	add	r22, r22
 266:	77 1f       	adc	r23, r23
 268:	88 1f       	adc	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	1a f0       	brmi	.+6      	; 0x274 <__fixunssfsi+0x22>
 26e:	ba 95       	dec	r27
 270:	c9 f7       	brne	.-14     	; 0x264 <__fixunssfsi+0x12>
 272:	12 c0       	rjmp	.+36     	; 0x298 <__fixunssfsi+0x46>
 274:	b1 30       	cpi	r27, 0x01	; 1
 276:	81 f0       	breq	.+32     	; 0x298 <__fixunssfsi+0x46>
 278:	9b d0       	rcall	.+310    	; 0x3b0 <__fp_zero>
 27a:	b1 e0       	ldi	r27, 0x01	; 1
 27c:	08 95       	ret
 27e:	98 c0       	rjmp	.+304    	; 0x3b0 <__fp_zero>
 280:	67 2f       	mov	r22, r23
 282:	78 2f       	mov	r23, r24
 284:	88 27       	eor	r24, r24
 286:	b8 5f       	subi	r27, 0xF8	; 248
 288:	39 f0       	breq	.+14     	; 0x298 <__fixunssfsi+0x46>
 28a:	b9 3f       	cpi	r27, 0xF9	; 249
 28c:	cc f3       	brlt	.-14     	; 0x280 <__fixunssfsi+0x2e>
 28e:	86 95       	lsr	r24
 290:	77 95       	ror	r23
 292:	67 95       	ror	r22
 294:	b3 95       	inc	r27
 296:	d9 f7       	brne	.-10     	; 0x28e <__fixunssfsi+0x3c>
 298:	3e f4       	brtc	.+14     	; 0x2a8 <__fixunssfsi+0x56>
 29a:	90 95       	com	r25
 29c:	80 95       	com	r24
 29e:	70 95       	com	r23
 2a0:	61 95       	neg	r22
 2a2:	7f 4f       	sbci	r23, 0xFF	; 255
 2a4:	8f 4f       	sbci	r24, 0xFF	; 255
 2a6:	9f 4f       	sbci	r25, 0xFF	; 255
 2a8:	08 95       	ret

000002aa <__floatunsisf>:
 2aa:	e8 94       	clt
 2ac:	09 c0       	rjmp	.+18     	; 0x2c0 <__floatsisf+0x12>

000002ae <__floatsisf>:
 2ae:	97 fb       	bst	r25, 7
 2b0:	3e f4       	brtc	.+14     	; 0x2c0 <__floatsisf+0x12>
 2b2:	90 95       	com	r25
 2b4:	80 95       	com	r24
 2b6:	70 95       	com	r23
 2b8:	61 95       	neg	r22
 2ba:	7f 4f       	sbci	r23, 0xFF	; 255
 2bc:	8f 4f       	sbci	r24, 0xFF	; 255
 2be:	9f 4f       	sbci	r25, 0xFF	; 255
 2c0:	99 23       	and	r25, r25
 2c2:	a9 f0       	breq	.+42     	; 0x2ee <__floatsisf+0x40>
 2c4:	f9 2f       	mov	r31, r25
 2c6:	96 e9       	ldi	r25, 0x96	; 150
 2c8:	bb 27       	eor	r27, r27
 2ca:	93 95       	inc	r25
 2cc:	f6 95       	lsr	r31
 2ce:	87 95       	ror	r24
 2d0:	77 95       	ror	r23
 2d2:	67 95       	ror	r22
 2d4:	b7 95       	ror	r27
 2d6:	f1 11       	cpse	r31, r1
 2d8:	f8 cf       	rjmp	.-16     	; 0x2ca <__floatsisf+0x1c>
 2da:	fa f4       	brpl	.+62     	; 0x31a <__floatsisf+0x6c>
 2dc:	bb 0f       	add	r27, r27
 2de:	11 f4       	brne	.+4      	; 0x2e4 <__floatsisf+0x36>
 2e0:	60 ff       	sbrs	r22, 0
 2e2:	1b c0       	rjmp	.+54     	; 0x31a <__floatsisf+0x6c>
 2e4:	6f 5f       	subi	r22, 0xFF	; 255
 2e6:	7f 4f       	sbci	r23, 0xFF	; 255
 2e8:	8f 4f       	sbci	r24, 0xFF	; 255
 2ea:	9f 4f       	sbci	r25, 0xFF	; 255
 2ec:	16 c0       	rjmp	.+44     	; 0x31a <__floatsisf+0x6c>
 2ee:	88 23       	and	r24, r24
 2f0:	11 f0       	breq	.+4      	; 0x2f6 <__floatsisf+0x48>
 2f2:	96 e9       	ldi	r25, 0x96	; 150
 2f4:	11 c0       	rjmp	.+34     	; 0x318 <__floatsisf+0x6a>
 2f6:	77 23       	and	r23, r23
 2f8:	21 f0       	breq	.+8      	; 0x302 <__floatsisf+0x54>
 2fa:	9e e8       	ldi	r25, 0x8E	; 142
 2fc:	87 2f       	mov	r24, r23
 2fe:	76 2f       	mov	r23, r22
 300:	05 c0       	rjmp	.+10     	; 0x30c <__floatsisf+0x5e>
 302:	66 23       	and	r22, r22
 304:	71 f0       	breq	.+28     	; 0x322 <__floatsisf+0x74>
 306:	96 e8       	ldi	r25, 0x86	; 134
 308:	86 2f       	mov	r24, r22
 30a:	70 e0       	ldi	r23, 0x00	; 0
 30c:	60 e0       	ldi	r22, 0x00	; 0
 30e:	2a f0       	brmi	.+10     	; 0x31a <__floatsisf+0x6c>
 310:	9a 95       	dec	r25
 312:	66 0f       	add	r22, r22
 314:	77 1f       	adc	r23, r23
 316:	88 1f       	adc	r24, r24
 318:	da f7       	brpl	.-10     	; 0x310 <__floatsisf+0x62>
 31a:	88 0f       	add	r24, r24
 31c:	96 95       	lsr	r25
 31e:	87 95       	ror	r24
 320:	97 f9       	bld	r25, 7
 322:	08 95       	ret

00000324 <__fp_cmp>:
 324:	99 0f       	add	r25, r25
 326:	00 08       	sbc	r0, r0
 328:	55 0f       	add	r21, r21
 32a:	aa 0b       	sbc	r26, r26
 32c:	e0 e8       	ldi	r30, 0x80	; 128
 32e:	fe ef       	ldi	r31, 0xFE	; 254
 330:	16 16       	cp	r1, r22
 332:	17 06       	cpc	r1, r23
 334:	e8 07       	cpc	r30, r24
 336:	f9 07       	cpc	r31, r25
 338:	c0 f0       	brcs	.+48     	; 0x36a <__fp_cmp+0x46>
 33a:	12 16       	cp	r1, r18
 33c:	13 06       	cpc	r1, r19
 33e:	e4 07       	cpc	r30, r20
 340:	f5 07       	cpc	r31, r21
 342:	98 f0       	brcs	.+38     	; 0x36a <__fp_cmp+0x46>
 344:	62 1b       	sub	r22, r18
 346:	73 0b       	sbc	r23, r19
 348:	84 0b       	sbc	r24, r20
 34a:	95 0b       	sbc	r25, r21
 34c:	39 f4       	brne	.+14     	; 0x35c <__fp_cmp+0x38>
 34e:	0a 26       	eor	r0, r26
 350:	61 f0       	breq	.+24     	; 0x36a <__fp_cmp+0x46>
 352:	23 2b       	or	r18, r19
 354:	24 2b       	or	r18, r20
 356:	25 2b       	or	r18, r21
 358:	21 f4       	brne	.+8      	; 0x362 <__fp_cmp+0x3e>
 35a:	08 95       	ret
 35c:	0a 26       	eor	r0, r26
 35e:	09 f4       	brne	.+2      	; 0x362 <__fp_cmp+0x3e>
 360:	a1 40       	sbci	r26, 0x01	; 1
 362:	a6 95       	lsr	r26
 364:	8f ef       	ldi	r24, 0xFF	; 255
 366:	81 1d       	adc	r24, r1
 368:	81 1d       	adc	r24, r1
 36a:	08 95       	ret

0000036c <__fp_split3>:
 36c:	57 fd       	sbrc	r21, 7
 36e:	90 58       	subi	r25, 0x80	; 128
 370:	44 0f       	add	r20, r20
 372:	55 1f       	adc	r21, r21
 374:	59 f0       	breq	.+22     	; 0x38c <__fp_splitA+0x10>
 376:	5f 3f       	cpi	r21, 0xFF	; 255
 378:	71 f0       	breq	.+28     	; 0x396 <__fp_splitA+0x1a>
 37a:	47 95       	ror	r20

0000037c <__fp_splitA>:
 37c:	88 0f       	add	r24, r24
 37e:	97 fb       	bst	r25, 7
 380:	99 1f       	adc	r25, r25
 382:	61 f0       	breq	.+24     	; 0x39c <__fp_splitA+0x20>
 384:	9f 3f       	cpi	r25, 0xFF	; 255
 386:	79 f0       	breq	.+30     	; 0x3a6 <__fp_splitA+0x2a>
 388:	87 95       	ror	r24
 38a:	08 95       	ret
 38c:	12 16       	cp	r1, r18
 38e:	13 06       	cpc	r1, r19
 390:	14 06       	cpc	r1, r20
 392:	55 1f       	adc	r21, r21
 394:	f2 cf       	rjmp	.-28     	; 0x37a <__fp_split3+0xe>
 396:	46 95       	lsr	r20
 398:	f1 df       	rcall	.-30     	; 0x37c <__fp_splitA>
 39a:	08 c0       	rjmp	.+16     	; 0x3ac <__fp_splitA+0x30>
 39c:	16 16       	cp	r1, r22
 39e:	17 06       	cpc	r1, r23
 3a0:	18 06       	cpc	r1, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	f1 cf       	rjmp	.-30     	; 0x388 <__fp_splitA+0xc>
 3a6:	86 95       	lsr	r24
 3a8:	71 05       	cpc	r23, r1
 3aa:	61 05       	cpc	r22, r1
 3ac:	08 94       	sec
 3ae:	08 95       	ret

000003b0 <__fp_zero>:
 3b0:	e8 94       	clt

000003b2 <__fp_szero>:
 3b2:	bb 27       	eor	r27, r27
 3b4:	66 27       	eor	r22, r22
 3b6:	77 27       	eor	r23, r23
 3b8:	cb 01       	movw	r24, r22
 3ba:	97 f9       	bld	r25, 7
 3bc:	08 95       	ret

000003be <__gesf2>:
 3be:	b2 df       	rcall	.-156    	; 0x324 <__fp_cmp>
 3c0:	08 f4       	brcc	.+2      	; 0x3c4 <__gesf2+0x6>
 3c2:	8f ef       	ldi	r24, 0xFF	; 255
 3c4:	08 95       	ret

000003c6 <__mulsf3>:
 3c6:	0b d0       	rcall	.+22     	; 0x3de <__mulsf3x>
 3c8:	78 c0       	rjmp	.+240    	; 0x4ba <__fp_round>
 3ca:	69 d0       	rcall	.+210    	; 0x49e <__fp_pscA>
 3cc:	28 f0       	brcs	.+10     	; 0x3d8 <__mulsf3+0x12>
 3ce:	6e d0       	rcall	.+220    	; 0x4ac <__fp_pscB>
 3d0:	18 f0       	brcs	.+6      	; 0x3d8 <__mulsf3+0x12>
 3d2:	95 23       	and	r25, r21
 3d4:	09 f0       	breq	.+2      	; 0x3d8 <__mulsf3+0x12>
 3d6:	5a c0       	rjmp	.+180    	; 0x48c <__fp_inf>
 3d8:	5f c0       	rjmp	.+190    	; 0x498 <__fp_nan>
 3da:	11 24       	eor	r1, r1
 3dc:	ea cf       	rjmp	.-44     	; 0x3b2 <__fp_szero>

000003de <__mulsf3x>:
 3de:	c6 df       	rcall	.-116    	; 0x36c <__fp_split3>
 3e0:	a0 f3       	brcs	.-24     	; 0x3ca <__mulsf3+0x4>

000003e2 <__mulsf3_pse>:
 3e2:	95 9f       	mul	r25, r21
 3e4:	d1 f3       	breq	.-12     	; 0x3da <__mulsf3+0x14>
 3e6:	95 0f       	add	r25, r21
 3e8:	50 e0       	ldi	r21, 0x00	; 0
 3ea:	55 1f       	adc	r21, r21
 3ec:	62 9f       	mul	r22, r18
 3ee:	f0 01       	movw	r30, r0
 3f0:	72 9f       	mul	r23, r18
 3f2:	bb 27       	eor	r27, r27
 3f4:	f0 0d       	add	r31, r0
 3f6:	b1 1d       	adc	r27, r1
 3f8:	63 9f       	mul	r22, r19
 3fa:	aa 27       	eor	r26, r26
 3fc:	f0 0d       	add	r31, r0
 3fe:	b1 1d       	adc	r27, r1
 400:	aa 1f       	adc	r26, r26
 402:	64 9f       	mul	r22, r20
 404:	66 27       	eor	r22, r22
 406:	b0 0d       	add	r27, r0
 408:	a1 1d       	adc	r26, r1
 40a:	66 1f       	adc	r22, r22
 40c:	82 9f       	mul	r24, r18
 40e:	22 27       	eor	r18, r18
 410:	b0 0d       	add	r27, r0
 412:	a1 1d       	adc	r26, r1
 414:	62 1f       	adc	r22, r18
 416:	73 9f       	mul	r23, r19
 418:	b0 0d       	add	r27, r0
 41a:	a1 1d       	adc	r26, r1
 41c:	62 1f       	adc	r22, r18
 41e:	83 9f       	mul	r24, r19
 420:	a0 0d       	add	r26, r0
 422:	61 1d       	adc	r22, r1
 424:	22 1f       	adc	r18, r18
 426:	74 9f       	mul	r23, r20
 428:	33 27       	eor	r19, r19
 42a:	a0 0d       	add	r26, r0
 42c:	61 1d       	adc	r22, r1
 42e:	23 1f       	adc	r18, r19
 430:	84 9f       	mul	r24, r20
 432:	60 0d       	add	r22, r0
 434:	21 1d       	adc	r18, r1
 436:	82 2f       	mov	r24, r18
 438:	76 2f       	mov	r23, r22
 43a:	6a 2f       	mov	r22, r26
 43c:	11 24       	eor	r1, r1
 43e:	9f 57       	subi	r25, 0x7F	; 127
 440:	50 40       	sbci	r21, 0x00	; 0
 442:	8a f0       	brmi	.+34     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 444:	e1 f0       	breq	.+56     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 446:	88 23       	and	r24, r24
 448:	4a f0       	brmi	.+18     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 44a:	ee 0f       	add	r30, r30
 44c:	ff 1f       	adc	r31, r31
 44e:	bb 1f       	adc	r27, r27
 450:	66 1f       	adc	r22, r22
 452:	77 1f       	adc	r23, r23
 454:	88 1f       	adc	r24, r24
 456:	91 50       	subi	r25, 0x01	; 1
 458:	50 40       	sbci	r21, 0x00	; 0
 45a:	a9 f7       	brne	.-22     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 45c:	9e 3f       	cpi	r25, 0xFE	; 254
 45e:	51 05       	cpc	r21, r1
 460:	70 f0       	brcs	.+28     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 462:	14 c0       	rjmp	.+40     	; 0x48c <__fp_inf>
 464:	a6 cf       	rjmp	.-180    	; 0x3b2 <__fp_szero>
 466:	5f 3f       	cpi	r21, 0xFF	; 255
 468:	ec f3       	brlt	.-6      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 46a:	98 3e       	cpi	r25, 0xE8	; 232
 46c:	dc f3       	brlt	.-10     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 46e:	86 95       	lsr	r24
 470:	77 95       	ror	r23
 472:	67 95       	ror	r22
 474:	b7 95       	ror	r27
 476:	f7 95       	ror	r31
 478:	e7 95       	ror	r30
 47a:	9f 5f       	subi	r25, 0xFF	; 255
 47c:	c1 f7       	brne	.-16     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 47e:	fe 2b       	or	r31, r30
 480:	88 0f       	add	r24, r24
 482:	91 1d       	adc	r25, r1
 484:	96 95       	lsr	r25
 486:	87 95       	ror	r24
 488:	97 f9       	bld	r25, 7
 48a:	08 95       	ret

0000048c <__fp_inf>:
 48c:	97 f9       	bld	r25, 7
 48e:	9f 67       	ori	r25, 0x7F	; 127
 490:	80 e8       	ldi	r24, 0x80	; 128
 492:	70 e0       	ldi	r23, 0x00	; 0
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	08 95       	ret

00000498 <__fp_nan>:
 498:	9f ef       	ldi	r25, 0xFF	; 255
 49a:	80 ec       	ldi	r24, 0xC0	; 192
 49c:	08 95       	ret

0000049e <__fp_pscA>:
 49e:	00 24       	eor	r0, r0
 4a0:	0a 94       	dec	r0
 4a2:	16 16       	cp	r1, r22
 4a4:	17 06       	cpc	r1, r23
 4a6:	18 06       	cpc	r1, r24
 4a8:	09 06       	cpc	r0, r25
 4aa:	08 95       	ret

000004ac <__fp_pscB>:
 4ac:	00 24       	eor	r0, r0
 4ae:	0a 94       	dec	r0
 4b0:	12 16       	cp	r1, r18
 4b2:	13 06       	cpc	r1, r19
 4b4:	14 06       	cpc	r1, r20
 4b6:	05 06       	cpc	r0, r21
 4b8:	08 95       	ret

000004ba <__fp_round>:
 4ba:	09 2e       	mov	r0, r25
 4bc:	03 94       	inc	r0
 4be:	00 0c       	add	r0, r0
 4c0:	11 f4       	brne	.+4      	; 0x4c6 <__fp_round+0xc>
 4c2:	88 23       	and	r24, r24
 4c4:	52 f0       	brmi	.+20     	; 0x4da <__fp_round+0x20>
 4c6:	bb 0f       	add	r27, r27
 4c8:	40 f4       	brcc	.+16     	; 0x4da <__fp_round+0x20>
 4ca:	bf 2b       	or	r27, r31
 4cc:	11 f4       	brne	.+4      	; 0x4d2 <__fp_round+0x18>
 4ce:	60 ff       	sbrs	r22, 0
 4d0:	04 c0       	rjmp	.+8      	; 0x4da <__fp_round+0x20>
 4d2:	6f 5f       	subi	r22, 0xFF	; 255
 4d4:	7f 4f       	sbci	r23, 0xFF	; 255
 4d6:	8f 4f       	sbci	r24, 0xFF	; 255
 4d8:	9f 4f       	sbci	r25, 0xFF	; 255
 4da:	08 95       	ret

000004dc <_exit>:
 4dc:	f8 94       	cli

000004de <__stop_program>:
 4de:	ff cf       	rjmp	.-2      	; 0x4de <__stop_program>
